<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STl 上</title>
      <link href="2020/102664718.html"/>
      <url>2020/102664718.html</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h3 id="stl是C-程序库，我们只需要了解它的-1-容器-2-函数（内置算法）-3-迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择"><a href="#stl是C-程序库，我们只需要了解它的-1-容器-2-函数（内置算法）-3-迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择" class="headerlink" title="stl是C++程序库，我们只需要了解它的 1 容器 2 函数（内置算法） 3 迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择"></a>stl是C++程序库，我们只需要了解它的 1 容器 2 函数（内置算法） 3 迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择</h3><h3 id="常用stl容器：1-vector-2-stack-3-queue-4-map-5-set-6-list"><a href="#常用stl容器：1-vector-2-stack-3-queue-4-map-5-set-6-list" class="headerlink" title="常用stl容器：1 vector 2 stack 3 queue 4 map 5 set 6 list"></a>常用stl容器：1 vector 2 stack 3 queue 4 map 5 set 6 list</h3><h4 id="以vector举例"><a href="#以vector举例" class="headerlink" title="以vector举例"></a>以vector举例</h4><h5 id="我们用一个容器应该知道它的特性-明白两点-它的特性-以及如何使用它"><a href="#我们用一个容器应该知道它的特性-明白两点-它的特性-以及如何使用它" class="headerlink" title="我们用一个容器应该知道它的特性 明白两点 它的特性 以及如何使用它"></a>我们用一个容器应该知道它的特性 明白两点 它的特性 以及如何使用它</h5><p>​    vector其实就是类似于数组 ，不过多了很多内置函数方便你处理</p><p>​    如何使用它：我给出一下实例 建议自己边敲边理解</p><p>你只需要知道 怎么定义 怎么输入 怎么输出 以及有哪些可用函数</p><pre class="line-numbers language-c++c" data-language="c++c"><code class="language-c++c">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int n;cin&gt;&gt;n;#1 初始化vector  创建了两个vector容器 a,b  vector&lt;int&gt;a,b;#2 输入 for(int i&#x3D;0;i&lt;n;i++)&#123;int shuru;cin&gt;&gt;shuru;#根据英文理解就是从后面输入元素 0&lt;-1&lt;-2 a.push_back(shuru);&#125;#3 输出（访问） it 是迭代器 也就是 a的 指针  用于访问vector元素 for(vector&lt;int&gt;::iterator it&#x3D;a.begin();it&lt;a.end();it++)&#123;#联想指针的用法 it是它的地址 cout&lt;&lt;*it;&#125;#4 vector 的 函数#增 #assian用于输入 #1将a的前0-2号元素复制给b b.assign(a.begin(),a.begin()+3);#2给b初始化4个为2的元素 b.assign(4,2);#a.insert() 插入a.insert(a.begin()+1,3);&#x2F;&#x2F;在第一个元素后面插入3  int num&#x3D;0; a.insert(a.begin()+1,3,num);&#x2F;&#x2F;在第一个元素后面插入3个num a.insert(a.begin()+1,b.begin()+2,b.begin()+4);&#x2F;&#x2F;在a的第一个元素后面插入b的2-4号元素值 #增加100个容器容量 a.reserve(100); #a.resize() #增加10个元素 a.resize(10);# 增加10个元素  初值为2 a.resize(10,2);#查 # a.empty 用于判空 if(a.empty()) &#123;cout&lt;&lt;&quot;a is empty&quot;； &#125;#a.size a的元素个数 int lenth&#x3D;a.size(); #a.capacity() a能容纳多少个元素 int room&#x3D;a.capacity();#访问第一个元素 int first&#x3D;a.front();#访问最后一个元素 int last &#x3D;a.back(); #删 #a.pop_back() 根据英语理解就是删除最后一个元素 a.pop_back();#a.erase() 删除0-2这个三个元素 a.erase(a.begin()+1,a.begin()+3); #清空a的元素 a.clear();#改#a b 交互 a.swap(b);#常用函数  #include&lt;algorithm&gt;&#x2F;&#x2F;用内置算法需要这个库 &#x2F;&#x2F;对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列 sort(a.begin(),a.end()); &#x2F;&#x2F;对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1 reverse(a.begin(),a.end());  &#x2F;&#x2F;把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素 copy(a.begin(),a.end(),b.begin()+1); &#x2F;&#x2F;在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置  find(a.begin(),a.end(),10); &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接下来我们进行一个实战"><a href="#接下来我们进行一个实战" class="headerlink" title="接下来我们进行一个实战"></a>接下来我们进行一个实战</h3><h3 id="http-acm-swust-edu-cn-problem-254-496"><a href="#http-acm-swust-edu-cn-problem-254-496" class="headerlink" title="http://acm.swust.edu.cn/#/problem/254/496"></a><a href="http://acm.swust.edu.cn/#/problem/254/496">http://acm.swust.edu.cn/#/problem/254/496</a></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;&#x2F;&#x2F;这里直接用万能头文件 vector的库来自于#include&lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F;这个题需要进行反复的数组翻转所以用vector和reverse函数非常合适 vector&lt;int&gt;a;int n;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;int shuru;cin&gt;&gt;shuru;a.push_back(shuru);&#125; &#x2F;&#x2F;c.begin() 返回一个迭代器，它指向容器c的第一个元素&#x2F;&#x2F;c.end() 返回一个迭代器，它指向容器c的最后一个元素的下一个位置&#x2F;&#x2F;c.rbegin() 返回一个逆序迭代器，它指向容器c的最后一个元素&#x2F;&#x2F;c.rend() 返回一个逆序迭代器，它指向容器c的第一个元素前面的位置&#x2F;&#x2F;!!!begin 和 end 一起  rbegin 和 rend 一起 不能混用 这里我使用的 iterator 它和 reverse_iterator的规律是相反的 vector&lt;int&gt;::iterator it&#x3D;a.end()-1;&#x2F;&#x2F;这个题要执行的两个操作 一个就是从右向左找到最大的 然后把它反转到最左边， 一个就是把它翻转到最右边&#x2F;&#x2F;直到 整个vector呈升序int ji&#x3D;0;&#x2F;&#x2F;记录翻转次数&#x2F;&#x2F;第一层循环，每次循环确保右边的一位为最大值，第二层循环去寻找最大值 ,然后进行翻转 for(;it !&#x3D; a.begin();it--) &#123;int max&#x3D;*it;vector&lt;int&gt;::iterator p&#x3D;it;vector&lt;int&gt;::iterator r&#x3D;it;int flag&#x3D;0;for(vector&lt;int&gt;::iterator it1&#x3D;it-1;it1 !&#x3D; a.begin()-1;it1--)&#123; if(*it1&gt;max)&#123; p&#x3D;it1; max&#x3D;*it1; flag&#x3D;1; &#125;&#125;&#x2F;&#x2F;找到最大值max以及它的位置p if(flag&#x3D;&#x3D;0)&#123;continue;&#x2F;&#x2F;说明最后一个就是最大值不用翻转 &#125;if(p&#x3D;&#x3D;a.begin())&#123;&#x2F;&#x2F;情况一 ji+&#x3D;1;reverse(a.begin(),r+1);&#125;else&#123;&#x2F;&#x2F;情况二 ji+&#x3D;2;reverse(a.begin(),p+1);reverse(a.begin(),r+1);&#125; &#125;cout&lt;&lt;ji&lt;&lt;endl; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ok-接下来-我们来介绍两个简单的"><a href="#ok-接下来-我们来介绍两个简单的" class="headerlink" title="ok 接下来 我们来介绍两个简单的"></a>ok 接下来 我们来介绍两个简单的</h2><h3 id="stack-即是栈-queue-就是队列"><a href="#stack-即是栈-queue-就是队列" class="headerlink" title="stack 即是栈 queue 就是队列"></a>stack 即是栈 queue 就是队列</h3><p>对于栈来说 记住3点</p><ol><li>stack 先进后出</li><li>#include<stack>导入库  stack<int>sta 定义</li><li>sta.push()进 sta.pop()出 sta.top()查看栈顶 sta.empty()查空 sta.size()查看大小</li></ol><p>对于队列来说 同上：</p><ol><li>queue先进先出</li><li>#include<queue> queue<int>que 定义</li><li>que.push()  que.pop() que.empty() que.size() 这些用法同上 就是访问不同que.front()  que.back()</li></ol><p>stack和queue 还有更高级的用法 后面用到再讲</p><h2 id="stack练习题"><a href="#stack练习题" class="headerlink" title="stack练习题"></a>stack练习题</h2><p><a href="https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2?tpId=46&amp;&amp;tqId=29158&amp;rp=1&amp;ru=/ta/classic-code&amp;qru=/ta/classic-code/question-ranking">https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2?tpId=46&amp;&amp;tqId=29158&amp;rp=1&amp;ru=/ta/classic-code&amp;qru=/ta/classic-code/question-ranking</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;stack&lt;char&gt;sta;char shuru;string a;cin&gt;&gt;a;for(int i&#x3D;0;i&lt;a.length();i++)&#123;shuru&#x3D;a[i];if(shuru&#x3D;&#39;&quot;&#39;)&#123;continue;&#125;if(sta.empty()||shuru&#x3D;&#x3D;&#39;(&#39;||shuru&#x3D;&#x3D;&#39;&#123;&#39;||shuru&#x3D;&#x3D;&#39;[&#39;)sta.push(shuru);else&#123;if((shuru&#x3D;&#x3D;&#39;)&#39;&amp;&amp;sta.top()!&#x3D;&#39;(&#39;)||(shuru&#x3D;&#x3D;&#39;]&#39;&amp;&amp;sta.top()!&#x3D;&#39;[&#39;)||(shuru&#x3D;&#x3D;&#39;&#125;&#39;&amp;&amp;sta.top()!&#x3D;&#39;&#123;&#39;))&#123;cout&lt;&lt;&quot;false\n&quot;;exit(0);&#125;sta.pop();&#125;&#125; if(a.length()%2&#x3D;&#x3D;0)cout&lt;&lt;&quot;true\n&quot;;else&#123;cout&lt;&lt;&quot;false\n&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="queue练习题"><a href="#queue练习题" class="headerlink" title="queue练习题"></a>queue练习题</h3><p><a href="https://www.nowcoder.com/practice/657d09e2b3704574814089ba8566d98d?tpId=182&amp;&amp;tqId=34299&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/exam-all/question-ranking">https://www.nowcoder.com/practice/657d09e2b3704574814089ba8566d98d?tpId=182&amp;&amp;tqId=34299&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/exam-all/question-ranking</a></p><h1 id="明天讲stl的-map-set-以及list-和string（重点）"><a href="#明天讲stl的-map-set-以及list-和string（重点）" class="headerlink" title="明天讲stl的 map set 以及list 和string（重点）"></a>明天讲stl的 map set 以及list 和string（重点）</h1><h1 id="stack-答案"><a href="#stack-答案" class="headerlink" title="stack 答案"></a>stack 答案</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;stack&lt;char&gt;sta;char shuru;string a;cin&gt;&gt;a;for(int i&#x3D;0;i&lt;a.length();i++)&#123;shuru&#x3D;a[i];if(shuru&#x3D;&#39;&quot;&#39;)&#123;continue;&#125;if(sta.empty()||shuru&#x3D;&#x3D;&#39;(&#39;||shuru&#x3D;&#x3D;&#39;&#123;&#39;||shuru&#x3D;&#x3D;&#39;[&#39;)sta.push(shuru);else&#123;if((shuru&#x3D;&#x3D;&#39;)&#39;&amp;&amp;sta.top()!&#x3D;&#39;(&#39;)||(shuru&#x3D;&#x3D;&#39;]&#39;&amp;&amp;sta.top()!&#x3D;&#39;[&#39;)||(shuru&#x3D;&#x3D;&#39;&#125;&#39;&amp;&amp;sta.top()!&#x3D;&#39;&#123;&#39;))&#123;cout&lt;&lt;&quot;false\n&quot;;exit(0);&#125;sta.pop();&#125;&#125; if(a.length()%2&#x3D;&#x3D;0)cout&lt;&lt;&quot;true\n&quot;;else&#123;cout&lt;&lt;&quot;false\n&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="牛客通过答案"><a href="#牛客通过答案" class="headerlink" title="牛客通过答案"></a>牛客通过答案</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    &#x2F;**     *      * @param s string字符串      * @return bool布尔型     *&#x2F;    bool isValid(string s) &#123;        &#x2F;&#x2F; write code here        stack&lt;char&gt;st;        for(int i&#x3D;0;i&lt;s.size();i++)        &#123;            if(s[i]&#x3D;&#x3D;&#39;(&#39;||s[i]&#x3D;&#x3D;&#39;&#123;&#39;||s[i]&#x3D;&#x3D;&#39;[&#39;)                st.push(s[i]);            else if(s[i]&#x3D;&#x3D;&#39;)&#39;)            &#123;                if(st.empty()&#x3D;&#x3D;true||st.top()!&#x3D;&#39;(&#39;)                &#123;                    return false;                &#125;                    st.pop();            &#125;            else if(s[i]&#x3D;&#x3D;&#39;]&#39;)            &#123;                if(st.empty()&#x3D;&#x3D;true||st.top()!&#x3D;&#39;[&#39;)                &#123;                    return false;                &#125;                    st.pop();            &#125;            else            &#123;                if(st.empty()&#x3D;&#x3D;true||st.top()!&#x3D;&#39;&#123;&#39;)                &#123;                    return false;                &#125;                    st.pop();            &#125;        &#125;        if(st.empty()&#x3D;&#x3D;true)            return true;        else            return false;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="queue-答案-牛课"><a href="#queue-答案-牛课" class="headerlink" title="queue 答案  牛课"></a>queue 答案  牛课</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;int main()&#123;int times;cin &gt;&gt; times;while (times--)&#123;deque&lt;int&gt; q;int temp;cin &gt;&gt; temp;for (int i &#x3D; temp; i !&#x3D; 0;--i)&#x2F;&#x2F;对于每一个数，将其加入队头，再将队尾加入队头&#123;q.push_front(i);q.push_front(q.back());q.pop_back();&#125;for (int i &#x3D; 0; i !&#x3D; q.size() - 1;++i)&#123;cout &lt;&lt; q[i] &lt;&lt; &#39; &#39;;&#125;cout &lt;&lt; q.back() &lt;&lt; endl;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pull test1</title>
      <link href="2020/102627212.html"/>
      <url>2020/102627212.html</url>
      
        <content type="html"><![CDATA[<p>test2</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pull test</title>
      <link href="2020/102636008.html"/>
      <url>2020/102636008.html</url>
      
        <content type="html"><![CDATA[<p>just a test</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于admin图片不能显示的解决方法</title>
      <link href="2020/102652089.html"/>
      <url>2020/102652089.html</url>
      
        <content type="html"><![CDATA[<h1 id="转载https-blog-csdn-net-nineya-com-article-details-103384546"><a href="#转载https-blog-csdn-net-nineya-com-article-details-103384546" class="headerlink" title="转载https://blog.csdn.net/nineya_com/article/details/103384546"></a>转载<a href="https://blog.csdn.net/nineya_com/article/details/103384546">https://blog.csdn.net/nineya_com/article/details/103384546</a></h1><p>`</p><p>转载：<a href="https://blog.csdn.net/nineya_com/article/details/103384546">https://blog.csdn.net/nineya_com/article/details/103384546</a></p><p><img src="E:\图片\margin.jpg" alt="margin"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本人win10系统，在使用插件时插入图片遇到了图片插入裂图的问题，在网上找了一下教程都无法解决，只有说手动改路径，但是我觉得手动改太麻烦，于是开始翻源码，被我找到了问题所在，顺便根据个人喜好做了一点点修改。文章可能还有很多不足，请大家谅解，欢迎大佬提意见。</p><p>附带插件GitHub地址：<a href="https://github.com/jaredly/hexo-admin">hexo-admin</a></p><p>文章可能有点长，这代表着我写的详细，时间并没有多少内容，每一步我都写的很详细，简单易懂。</p><h2 id="本文使用到的东西"><a href="#本文使用到的东西" class="headerlink" title="本文使用到的东西"></a>本文使用到的东西</h2><ol><li>win10电脑</li><li>hexo 3.1.0</li><li>hexo-admin 2.3.0</li></ol><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#_0">写在前面</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#_6">本文使用到的东西</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#1_12">1.问题描述</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#2_16">2.问题分析</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#3_18">3.问题解决第一步</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#4_43">4.问题解决第二步</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#5_68">5.插件修复+优化（附补丁下载地址）</a></li><li><ul><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#511_69">5.1优化1：修复了插图失败</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#522_71">5.2优化2：汉化</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#533_74">5.3优化3：添加按文章存储图片功能（方便管理）</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#544bug_79">5.4优化4：修复了编辑界面预览链接错误bug</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#555bug_83">5.5优化5：修复了新建分页失败bug</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#56_131">5.6补丁下载地址</a></li></ul></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#6_154">6.总结</a></li></ul></li></ul><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>在使用hexo插入图片的时候，我发现插入的 图片显示错误，而且链接有问题，不应该是“’！[upload successful] (\images\pasted-1.png)’”<br>应该是“’！[upload successful] (/images/pasted-1.png)’”<br><img src="https://img-blog.csdnimg.cn/20191204122801906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2.问题分析"></a>2.问题分析</h2><p>既然图片链接格式有错，我就手动改了一下链接，发现图片成功显示了，发布之后都可以正常使用。但是不能每次都怎么自己改代码，太麻烦了。后来我赵找到了问题所在。<img src="https://img-blog.csdnimg.cn/20191204123413656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-问题解决第一步"><a href="#3-问题解决第一步" class="headerlink" title="3.问题解决第一步"></a>3.问题解决第一步</h2><p>1.打开我们博客的目录的“<code>node_modules</code>”子目录，找到“<code>hexo-admin</code>”快捷方式。<br><img src="https://img-blog.csdnimg.cn/20191204123835452.png" alt="在这里插入图片描述"><br>2.双击进入该文件夹，打开“<code>api.js</code>”文件，通过搜索“<code>imagePath</code>”字符找到下图的代码片段，红框内就是我们要改的代码。<br><img src="https://img-blog.csdnimg.cn/20191204122124283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.将代码修改为</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">    filename &#x3D; imagePath+&quot;&#x2F;&quot;+ filename&#x2F;&#x2F;修改点    var outpath &#x3D; path.join(hexo.source_dir, filename)    var dataURI &#x3D; req.body.data.slice(&#39;data:image&#x2F;png;base64,&#39;.length)    var buf &#x3D; new Buffer(dataURI, &#39;base64&#39;)    hexo.log.d(&#96;saving image to $&#123;outpath&#125;&#96;)    fs.writeFile(outpath, buf, function (err) &#123;      if (err) &#123;        console.log(err)      &#125;      hexo.source.process().then(function () &#123;        res.done(&#123;          src: filename,&#x2F;&#x2F;修改点          msg: msg        &#125;)      &#125;);    &#125;)1234567891011121314151617<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-问题解决第二步"><a href="#4-问题解决第二步" class="headerlink" title="4.问题解决第二步"></a>4.问题解决第二步</h2><p>修改代码之后，我们可以看到，生成的已经是正确的图片路径了，但是图片还是加载失败了，我发现是因为图片刚上传上前去，hexo还没来得及让图片链接生效，重新刷新一下界面就可以显示了。</p><p>但是不能让我们插入一张图片就刷新一次，我们可以让图片上传后暂停一分钟再显示，所以要修改第二处代码。</p><p>1.打开hexo-admin目录下的子目录，找到“bundle.js文件”，并打开它。<br><img src="https://img-blog.csdnimg.cn/20191204125333522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.搜索“‘upload’”找到以下代码</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">uploadImage: function(data, filename)  &#123;return post(&#39;&#x2F;images&#x2F;upload&#39;, &#123;data: data, filename: filename&#125;);&#125;,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">    uploadImage: function(data, filename)  &#123;var imgJson&#x3D;post(&#39;&#x2F;images&#x2F;upload&#39;, &#123;data: data, filename: filename&#125;);var start &#x3D; (new Date()).getTime();while((new Date()).getTime() - start &lt; 1000) &#123;continue;&#125;return imgJson;&#125;,12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，图片无法显示的问题完美解决。</p><h2 id="5-插件修复-优化（附补丁下载地址）"><a href="#5-插件修复-优化（附补丁下载地址）" class="headerlink" title="5.插件修复+优化（附补丁下载地址）"></a>5.插件修复+优化（附补丁下载地址）</h2><h3 id="5-1优化1：修复了插图失败"><a href="#5-1优化1：修复了插图失败" class="headerlink" title="5.1优化1：修复了插图失败"></a>5.1优化1：修复了插图失败</h3><p>就是如上1-4步骤、修改源码，修复了插图失败bug。</p><h3 id="5-2优化2：汉化"><a href="#5-2优化2：汉化" class="headerlink" title="5.2优化2：汉化"></a>5.2优化2：汉化</h3><p>虽然hexo-admin使用起来非常简单，但是作为一个英语学渣，看着英文界面就是不舒服，所以汉化了该插件，爽。<br><img src="https://img-blog.csdnimg.cn/20191204194828197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191204194114148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-3优化3：添加按文章存储图片功能（方便管理）"><a href="#5-3优化3：添加按文章存储图片功能（方便管理）" class="headerlink" title="5.3优化3：添加按文章存储图片功能（方便管理）"></a>5.3优化3：添加按文章存储图片功能（方便管理）</h3><p>原本系统默认将图片统一存储在“<code>images</code>”目录下，文章一多，图片数量疯涨，就不容易维护，所以我添加了按文章存储图片的功能，图片将存储在与文章同目录的同名文件夹下。<br><img src="https://img-blog.csdnimg.cn/20191204194445547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>只需要在设置界面，勾选“图片存储在资源目录下”选项即可，取消勾选则将图片存放在hexo-admin定义的存储目录下。<img src="https://img-blog.csdnimg.cn/20191204194535747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-4优化4：修复了编辑界面预览链接错误bug"><a href="#5-4优化4：修复了编辑界面预览链接错误bug" class="headerlink" title="5.4优化4：修复了编辑界面预览链接错误bug"></a>5.4优化4：修复了编辑界面预览链接错误bug</h3><p>原本“分页”的编辑界面的预览链接是错误的，跳转的页面不正确，这里也修复了一下。<br><img src="https://img-blog.csdnimg.cn/2019120419502232.png" alt="在这里插入图片描述"></p><h3 id="5-5优化5：修复了新建分页失败bug"><a href="#5-5优化5：修复了新建分页失败bug" class="headerlink" title="5.5优化5：修复了新建分页失败bug"></a>5.5优化5：修复了新建分页失败bug</h3><p>最初新建分页无法点击确定时会提示如下错误，并且界面没有反应。但是刷新之后可以看到分页是新建成功的，就是有点麻烦，要刷新。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">Unhandled rejection TypeError: Cannot read property &#39;source&#39; of undefined    at addIsDraft (G:\blog\node_modules\_hexo-admin@2.3.0@hexo-admin\api.js:14:25)    at G:\blog\node_modules\_hexo-admin@2.3.0@hexo-admin\api.js:218:18    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)    at Promise._resolveCallback (G:\blog\node_modules\bluebird\js\release\promise.js:466:57)    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:559:17)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:725:18)    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)    at processImmediate (internal&#x2F;timers.js:439:21)12345678910111213141516171819<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修复之后该功能可以正常使用，但是还是会提示另一个错误，我弄了好久，没办法解决，等待懂的大佬教教我。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">Unhandled rejection WarehouseError: ID &#96;source&#x2F;444444&#x2F;index.md&#96; has been used    at new WarehouseError (G:\blog\node_modules\warehouse\lib\error.js:14:11)    at _Model._insertOne (G:\blog\node_modules\warehouse\lib\model.js:153:29)    at G:\blog\node_modules\warehouse\lib\model.js:179:63    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)    at G:\blog\node_modules\bluebird\js\release\using.js:185:26    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)    at PromiseArray._resolve (G:\blog\node_modules\bluebird\js\release\promise_array.js:127:19)    at PromiseArray._promiseFulfilled (G:\blog\node_modules\bluebird\js\release\promise_array.js:145:14)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:609:26)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)    at processImmediate (internal&#x2F;timers.js:439:21)12345678910111213141516171819202122<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6补丁下载地址"><a href="#5-6补丁下载地址" class="headerlink" title="5.6补丁下载地址"></a>5.6补丁下载地址</h3><p><strong>使用方法</strong><br>打开博客目录下的“<code>\node_modules\hexo-admin</code>”目录，全选复制所有补丁覆盖原文件即可。</p><p><strong>注意</strong><br>我使用的是<code>hexo-admin 2.3.0</code>版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。</p><p>如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。</p><p>卸载hexo-admin：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">npm uninstall hexo-admin –save1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新安装2.3.0版本</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">npm install hexo-admin@2.3.0 –save1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后覆盖插件。</p><p><strong>下载链接</strong>：链接：<a href="https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw">https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw</a><br>提取码：t3r0</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>弄这个插件耗费我一整天时间，做了一些些优化，目前本人用着还好，没有发现什么问题。有不清楚的地方欢迎评论留言，看到的我都会回复的。本文到此结束，有什么不足的地方请大家不吝指正。</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3</title>
      <link href="2020/10262360.html"/>
      <url>2020/10262360.html</url>
      
        <content type="html"><![CDATA[<p>原文地址<br><img src="/images/pasted-4.png" alt="upload successful"><br><a href="https://blog.csdn.net/nineya_com/article/details/103384546">https://blog.csdn.net/nineya_com/article/details/103384546</a></p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>写在前面</p><p>本人win10系统，在使用插件时插入图片遇到了图片插入裂图的问题，在网上找了一下教程都无法解决，只有说手动改路径，但是我觉得手动改太麻烦，于是开始翻源码，被我找到了问题所在，顺便根据个人喜好做了一点点修改。文章可能还有很多不足，请大家谅解，欢迎大佬提意见。</p><p>附带插件GitHub地址：hexo-admin</p><p>文章可能有点长，这代表着我写的详细，时间并没有多少内容，每一步我都写的很详细，简单易懂。</p><p>本文使用到的东西<br>win10电脑<br>hexo 3.1.0<br>hexo-admin 2.3.0<br>文章目录<br>写在前面<br>本文使用到的东西<br>1.问题描述<br>2.问题分析<br>3.问题解决第一步<br>4.问题解决第二步<br>5.插件修复+优化（附补丁下载地址）<br>5.1优化1：修复了插图失败<br>5.2优化2：汉化<br>5.3优化3：添加按文章存储图片功能（方便管理）<br>5.4优化4：修复了编辑界面预览链接错误bug<br>5.5优化5：修复了新建分页失败bug<br>5.6补丁下载地址<br>6.总结<br>1.问题描述<br>在使用hexo插入图片的时候，我发现插入的 图片显示错误，而且链接有问题，不应该是“’！[upload successful] (\images\pasted-1.png)’”<br>应该是“’！[upload successful] (/images/pasted-1.png)’”<br>在这里插入图片描述</p><p>2.问题分析<br>既然图片链接格式有错，我就手动改了一下链接，发现图片成功显示了，发布之后都可以正常使用。但是不能每次都怎么自己改代码，太麻烦了。后来我赵找到了问题所在。在这里插入图片描述</p><p>3.问题解决第一步<br>1.打开我们博客的目录的“node_modules”子目录，找到“hexo-admin”快捷方式。<br>在这里插入图片描述<br>2.双击进入该文件夹，打开“api.js”文件，通过搜索“imagePath”字符找到下图的代码片段，红框内就是我们要改的代码。<br>在这里插入图片描述<br>3.将代码修改为</p><pre><code>filename = imagePath+&quot;/&quot;+ filename    //修改点var outpath = path.join(hexo.source_dir, filename)var dataURI = req.body.data.slice(&#39;data:image/png;base64,&#39;.length)var buf = new Buffer(dataURI, &#39;base64&#39;)hexo.log.d(`saving image to $&#123;outpath&#125;`)fs.writeFile(outpath, buf, function (err) &#123;  if (err) &#123;    console.log(err)  &#125;  hexo.source.process().then(function () &#123;    res.done(&#123;      src: filename,    //修改点      msg: msg    &#125;)  &#125;);&#125;)</code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>4.问题解决第二步<br>修改代码之后，我们可以看到，生成的已经是正确的图片路径了，但是图片还是加载失败了，我发现是因为图片刚上传上前去，hexo还没来得及让图片链接生效，重新刷新一下界面就可以显示了。</p><p>但是不能让我们插入一张图片就刷新一次，我们可以让图片上传后暂停一分钟再显示，所以要修改第二处代码。</p><p>1.打开hexo-admin目录下的子目录，找到“bundle.js文件”，并打开它。<br>在这里插入图片描述<br>2.搜索“‘upload’”找到以下代码</p><p>uploadImage: function(data, filename)  {return post(‘/images/upload’, {data: data, filename: filename});},<br>1<br>修改为</p><pre><code>uploadImage: function(data, filename)  &#123;    var imgJson=post(&#39;/images/upload&#39;, &#123;data: data, filename: filename&#125;);    var start = (new Date()).getTime();    while((new Date()).getTime() - start &lt; 1000) &#123;        continue;    &#125;    return imgJson;&#125;,</code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>到这里，图片无法显示的问题完美解决。</p><p>5.插件修复+优化（附补丁下载地址）<br>5.1优化1：修复了插图失败<br>就是如上1-4步骤、修改源码，修复了插图失败bug。</p><p>5.2优化2：汉化<br>虽然hexo-admin使用起来非常简单，但是作为一个英语学渣，看着英文界面就是不舒服，所以汉化了该插件，爽。<br>在这里插入图片描述在这里插入图片描述</p><p>5.3优化3：添加按文章存储图片功能（方便管理）<br>原本系统默认将图片统一存储在“images”目录下，文章一多，图片数量疯涨，就不容易维护，所以我添加了按文章存储图片的功能，图片将存储在与文章同目录的同名文件夹下。<br>在这里插入图片描述<br>只需要在设置界面，勾选“图片存储在资源目录下”选项即可，取消勾选则将图片存放在hexo-admin定义的存储目录下。在这里插入图片描述</p><p>5.4优化4：修复了编辑界面预览链接错误bug<br>原本“分页”的编辑界面的预览链接是错误的，跳转的页面不正确，这里也修复了一下。<br>在这里插入图片描述</p><p>5.5优化5：修复了新建分页失败bug<br>最初新建分页无法点击确定时会提示如下错误，并且界面没有反应。但是刷新之后可以看到分页是新建成功的，就是有点麻烦，要刷新。</p><p>Unhandled rejection TypeError: Cannot read property ‘source’ of undefined<br>    at addIsDraft (G:\blog\node_modules_<a href="mailto:&#104;&#101;&#120;&#x6f;&#x2d;&#97;&#x64;&#x6d;&#x69;&#110;&#x40;&#50;&#46;&#51;&#x2e;&#48;">&#104;&#101;&#120;&#x6f;&#x2d;&#97;&#x64;&#x6d;&#x69;&#110;&#x40;&#50;&#46;&#51;&#x2e;&#48;</a>@hexo-admin\api.js:14:25)<br>    at G:\blog\node_modules_<a href="mailto:&#104;&#x65;&#x78;&#x6f;&#x2d;&#x61;&#x64;&#109;&#105;&#110;&#x40;&#x32;&#46;&#51;&#46;&#x30;">&#104;&#x65;&#x78;&#x6f;&#x2d;&#x61;&#x64;&#109;&#105;&#110;&#x40;&#x32;&#46;&#51;&#46;&#x30;</a>@hexo-admin\api.js:218:18<br>    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)<br>    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)<br>    at Promise._resolveCallback (G:\blog\node_modules\bluebird\js\release\promise.js:466:57)<br>    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:559:17)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:725:18)<br>    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)<br>    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)<br>    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)<br>    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)<br>    at processImmediate (internal/timers.js:439:21)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>修复之后该功能可以正常使用，但是还是会提示另一个错误，我弄了好久，没办法解决，等待懂的大佬教教我。</p><p>Unhandled rejection WarehouseError: ID <code>source/444444/index.md</code> has been used<br>    at new WarehouseError (G:\blog\node_modules\warehouse\lib\error.js:14:11)<br>    at _Model._insertOne (G:\blog\node_modules\warehouse\lib\model.js:153:29)<br>    at G:\blog\node_modules\warehouse\lib\model.js:179:63<br>    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)<br>    at G:\blog\node_modules\bluebird\js\release\using.js:185:26<br>    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)<br>    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)<br>    at PromiseArray._resolve (G:\blog\node_modules\bluebird\js\release\promise_array.js:127:19)<br>    at PromiseArray._promiseFulfilled (G:\blog\node_modules\bluebird\js\release\promise_array.js:145:14)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:609:26)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)<br>    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)<br>    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)<br>    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)<br>    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)<br>    at processImmediate (internal/timers.js:439:21)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>5.6补丁下载地址<br>使用方法<br>打开博客目录下的“\node_modules\hexo-admin”目录，全选复制所有补丁覆盖原文件即可。</p><p>注意<br>我使用的是hexo-admin 2.3.0版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。</p><p>如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。</p><p>卸载hexo-admin：</p><p>npm uninstall hexo-admin –save<br>1<br>重新安装2.3.0版本</p><p>npm install <a href="mailto:&#x68;&#x65;&#x78;&#x6f;&#x2d;&#97;&#100;&#x6d;&#x69;&#x6e;&#64;&#50;&#46;&#51;&#x2e;&#48;">&#x68;&#x65;&#x78;&#x6f;&#x2d;&#97;&#100;&#x6d;&#x69;&#x6e;&#64;&#50;&#46;&#51;&#x2e;&#48;</a> –save<br>1<br>然后覆盖插件。</p><p>下载链接：链接：<a href="https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw">https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw</a><br>提取码：t3r0</p><p>6.总结<br>弄这个插件耗费我一整天时间，做了一些些优化，目前本人用着还好，没有发现什么问题。有不清楚的地方欢迎评论留言，看到的我都会回复的。本文到此结束，有什么不足的地方请大家不吝指正。</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onine test</title>
      <link href="2020/102541528.html"/>
      <url>2020/102541528.html</url>
      
        <content type="html"><![CDATA[<p>this is a oneline test<br><a href="https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64">https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64</a></p><p><img src="%5Cimages%5Cpasted-1.png%5C" alt="upload successful"><br><img src="%5Cimages%5Cpasted-2.png%5C" alt="upload successful"><br><img src="%5Cimages%5Cpasted-3.png%5C" alt="upload successful"># 这个是标题</p><p><code>#include&lt;bits/std++.h&gt;</code></p><p><code>using namespace std;</code></p><p><code>int main()&#123;</code></p><p>​    <code>cout&lt;&lt;&quot;this is demo&quot;;</code></p><p><code>&#125;</code></p><p><img src="E:\图片\margin.jpg" alt="margin"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onine test2</title>
      <link href="2020/10251826.html"/>
      <url>2020/10251826.html</url>
      
        <content type="html"><![CDATA[<p>demo test<br>A. Matrix Game<br>*</p><ul><li>Author:  heyuhhh</li><li>Created Time:  2020/6/7 22:39:24</li><li>/<br>#include <iostream><br>#include <algorithm><br>#include <cstring><br>#include <cstdio><br>#include <vector><br>#include <cmath><br>#include <set><br>#include <map><br>#include <queue><br>#include <iomanip><br>#include &lt;assert.h&gt;<br>#include <functional><br>#include <numeric><br>#define MP make_pair<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define sz(x) (int)(x).size()<br>#define all(x) (x).begin(), (x).end()<br>#define INF 0x3f3f3f3f<br>#define Local<br>#ifdef Local<br>#define dbg(args…) do { cout &lt;&lt; #args &lt;&lt; “ -&gt; “; err(args); } while (0)<br>void err() { std::cout &lt;&lt; std::endl; }<br>template&lt;typename T, typename…Args&gt;<br>void err(T a, Args…args) { std::cout &lt;&lt; a &lt;&lt; ‘ ‘; err(args…); }<br>template &lt;template&lt;typename…&gt; class T, typename t, typename… A&gt;<br>void err(const T <t> &amp;arg, const A&amp;… args) {<br>for (auto &amp;v : arg) std::cout &lt;&lt; v &lt;&lt; ‘ ‘; err(args…); }<br>#else<br>#define dbg(…)<br>#endif<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>//head<br>const int N = 1e5 + 5;</li></ul><p>void run() {<br>    int n, m; cin &gt;&gt; n &gt;&gt; m;<br>    vector &lt;vector <int>&gt; a(n, vector <int>(m));<br>    vector <int> cols(m), rows(n);<br>    for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>            cin &gt;&gt; a[i][j];<br>            if (a[i][j]) {<br>                ++cols[j];<br>                ++rows[i];<br>            }<br>        }<br>    }<br>    int cntr = 0, cntl = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>        if (rows[i] == 0) ++cntr;<br>    }<br>    for (int i = 0; i &lt; m; i++) {<br>        if (cols[i] == 0) ++cntl;<br>    }<br>    int t = min(cntr, cntl);<br>    if (t &amp; 1) {<br>        cout &lt;&lt; “Ashish” &lt;&lt; ‘\n’;<br>    } else {<br>        cout &lt;&lt; “Vivek” &lt;&lt; ‘\n’;<br>    }<br>}</p><p>int main() {<br>    ios::sync_with_stdio(false);<br>    cin.tie(0); cout.tie(0);<br>    cout &lt;&lt; fixed &lt;&lt; setprecision(20);<br>    int T; cin &gt;&gt; T; while(T–)<br>    run();<br>    return 0;<br>}<br>B. Trouble Sort<br>注意到b中至少有一个0，一个1必然可以任意排序；否则直接判断一下即可。<br>/*</p><ul><li>Author:  heyuhhh</li><li>Created Time:  2020/6/7 22:44:07</li><li>/<br>#include <iostream><br>#include <algorithm><br>#include <cstring><br>#include <cstdio><br>#include <vector><br>#include <cmath><br>#include <set><br>#include <map><br>#include <queue><br>#include <iomanip><br>#include &lt;assert.h&gt;<br>#include <functional><br>#include <numeric><br>#define MP make_pair<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define sz(x) (int)(x).size()<br>#define all(x) (x).begin(), (x).end()<br>#define INF 0x3f3f3f3f<br>#define Local<br>#ifdef Local<br>#define dbg(args…) do { cout &lt;&lt; #args &lt;&lt; “ -&gt; “; err(args); } while (0)<br>void err() { std::cout &lt;&lt; std::endl; }<br>template&lt;typename T, typename…Args&gt;<br>void err(T a, Args…args) { std::cout &lt;&lt; a &lt;&lt; ‘ ‘; err(args…); }<br>template &lt;template&lt;typename…&gt; class T, typename t, typename… A&gt;<br>void err(const T <t> &amp;arg, const A&amp;… args) {<br>for (auto &amp;v : arg) std::cout &lt;&lt; v &lt;&lt; ‘ ‘; err(args…); }<br>#else<br>#define dbg(…)<br>#endif<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>//head<br>const int N = 1e5 + 5;</li></ul><p>void run() {<br>    int n; cin &gt;&gt; n;<br>    vector <int> a(n), b(n);<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; a[i];<br>    }<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; b[i];<br>    }<br>    sort(all(b));<br>    for (int i = 1; i &lt; n; i++) {<br>        if (b[i] != b[i - 1]) {<br>            cout &lt;&lt; “Yes” &lt;&lt; ‘\n’;<br>            return;<br>        }<br>    }<br>    for (int i = 1; i &lt; n; i++) {<br>        if (a[i] &lt; a[i - 1]) {<br>            cout &lt;&lt; “No” &lt;&lt; ‘\n’;<br>            return;<br>        }<br>    }<br>    cout &lt;&lt; “Yes” &lt;&lt; ‘\n’;<br>}</p><p>int main() {<br>    ios::sync_with_stdio(false);<br>    cin.tie(0); cout.tie(0);<br>    cout &lt;&lt; fixed &lt;&lt; setprecision(20);<br>    int T; cin &gt;&gt; T; while(T–)<br>    run();<br>    return 0;<br>}<br>C. Rotation Matching<br>求位置差值出现次数最多个数即可。</p><p>Code<br>/*</p><ul><li>Author:  heyuhhh</li><li>Created Time:  2020/6/7 23:22:04</li><li>/<br>#include <iostream><br>#include <algorithm><br>#include <cstring><br>#include <cstdio><br>#include <vector><br>#include <cmath><br>#include <set><br>#include <map><br>#include <queue><br>#include <iomanip><br>#include &lt;assert.h&gt;<br>#include <functional><br>#include <numeric><br>#define MP make_pair<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define sz(x) (int)(x).size()<br>#define all(x) (x).begin(), (x).end()<br>#define INF 0x3f3f3f3f<br>#define Local<br>#ifdef Local<br>#define dbg(args…) do { cout &lt;&lt; #args &lt;&lt; “ -&gt; “; err(args); } while (0)<br>void err() { std::cout &lt;&lt; std::endl; }<br>template&lt;typename T, typename…Args&gt;<br>void err(T a, Args…args) { std::cout &lt;&lt; a &lt;&lt; ‘ ‘; err(args…); }<br>template &lt;template&lt;typename…&gt; class T, typename t, typename… A&gt;<br>void err(const T <t> &amp;arg, const A&amp;… args) {<br>for (auto &amp;v : arg) std::cout &lt;&lt; v &lt;&lt; ‘ ‘; err(args…); }<br>#else<br>#define dbg(…)<br>#endif<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>//head<br>const int N = 1e5 + 5;</li></ul><p>void run() {<br>    int n; cin &gt;&gt; n;<br>    vector <int> a(n), b(n);<br>    vector &lt;vector <int>&gt; v(n + 1);<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; a[i];<br>        v[a[i]].push_back(i);<br>        v[a[i]].push_back(i + n);<br>    }<br>    vector <int> cnt(n);<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; b[i];<br>        for (auto it : v[b[i]]) {<br>            if (it &gt;= i &amp;&amp; it - i &lt; n) {<br>                ++cnt[it - i];<br>            }<br>        }<br>    }<br>    int ans = *max_element(all(cnt));<br>    cout &lt;&lt; ans &lt;&lt; ‘\n’;<br>}</p><p>int main() {<br>    ios::sync_with_stdio(false);<br>    cin.tie(0); cout.tie(0);<br>    cout &lt;&lt; fixed &lt;&lt; setprecision(20);<br>    run();<br>    return 0;<br>}</p><p>picture test<br><a href="https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64">https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64</a></p><p><img src="%5Cimages%5Cpasted-0.png%5C" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="2020/101222554.html"/>
      <url>2020/101222554.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/101116107.html"/>
      <url>2020/101116107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
