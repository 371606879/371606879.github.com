<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java实验2</title>
      <link href="2020/103053745.html"/>
      <url>2020/103053745.html</url>
      
        <content type="html"><![CDATA[<h1 id="java实验二"><a href="#java实验二" class="headerlink" title="java实验二"></a>java实验二</h1><h2 id="要求：java实现时钟"><a href="#要求：java实现时钟" class="headerlink" title="要求：java实现时钟"></a>要求：java实现时钟</h2><h3 id="分析：一个点是怎么样画时钟，一个点时数字转化为指针需要的处理"><a href="#分析：一个点是怎么样画时钟，一个点时数字转化为指针需要的处理" class="headerlink" title="分析：一个点是怎么样画时钟，一个点时数字转化为指针需要的处理"></a>分析：一个点是怎么样画时钟，一个点时数字转化为指针需要的处理</h3><pre class="line-numbers language-none"><code class="language-none">package timer1;import java.util.*;&#x2F;&#x2F;获取时间import java.applet.Applet;&#x2F;&#x2F;小程序import javax.swing.JLabel;&#x2F;&#x2F;？？？多余的import java.awt.Graphics;&#x2F;&#x2F;画图public class Clock extends Applet&#123;int x&#x3D;0,y&#x3D;0,r&#x3D;100;int h,m,s;double rad&#x3D; Math.PI&#x2F;180;    public void init()&#123;    &#x2F;&#x2F;获取时间        Calendar now &#x3D; new GregorianCalendar();        s &#x3D; now.get(Calendar.SECOND) * 6;         m &#x3D; now.get(Calendar.MINUTE) * 6;        h &#x3D; now.get(Calendar.HOUR) * 30 + now.get(Calendar.MINUTE) &#x2F; 12 * 6; &#x2F;&#x2F;计时器timer 以及更新时钟    Timer timer &#x3D;new Timer();     timer.schedule(new TimerTask() &#123;    public void run() &#123;    s+&#x3D;6;    if (m &#x3D;&#x3D; 72 || m &#x3D;&#x3D; 144 || m &#x3D;&#x3D; 288) &#123;    h +&#x3D; 6;    &#125;    if (m &gt;&#x3D; 360) &#123;    m &#x3D; 0;    h +&#x3D; 6;    &#125;    if (h &gt;&#x3D; 360) &#123;    h &#x3D; 0;    &#125;       repaint();    &#125;     &#125;, 1000,1000);           &#125;      public void paint(Graphics g) &#123;    &#x2F;&#x2F;时钟的绘制         g.drawOval(x, y, r * 2, r * 2);        int x1 &#x3D; (int) (90 * Math.sin(rad * s));        int y1 &#x3D; (int) (90 * Math.cos(rad * s));        g.drawLine(r, r, r + x1, r - y1);        x1 &#x3D; (int) (80 * Math.sin(rad * m));        y1 &#x3D; (int) (80 * Math.cos(rad * m));        g.drawLine(r, r, r + x1, r - y1);        x1 &#x3D; (int) (60 * Math.sin(rad * h));        y1 &#x3D; (int) (60 * Math.cos(rad * h));        g.drawLine(r, r, r + x1, r - y1);        int d &#x3D; 30;        for (int i &#x3D; 1; i &lt;&#x3D; 12; i++) &#123;            x1 &#x3D; (int) ((r - 10) * Math.sin(rad * d));            y1 &#x3D; (int) ((r - 10) * Math.cos(rad * d));            g.drawString(i + &quot;&quot;, r + x1, r - y1);            d +&#x3D; 30;        &#125;        d &#x3D; 0;        for (int i &#x3D; 1; i &lt;&#x3D; 60; i++) &#123;            x1 &#x3D; (int) ((r - 2) * Math.sin(rad * d));            y1 &#x3D; (int) ((r - 2) * Math.cos(rad * d));            g.drawString(&quot;.&quot;, r + x1, r - y1);            d +&#x3D; 6;        &#125;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="line-numbers language-none"><code class="language-none">package timer1;import java.awt.Graphics;public class Run &#123;public static void main(Graphics g) &#123;&#x2F;&#x2F;Graphics g &#x3D; new Graphics g;g.create(0,0,300,300);Clock clock &#x3D; new Clock();clock.init();clock.paint(g);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java实验1</title>
      <link href="2020/103053425.html"/>
      <url>2020/103053425.html</url>
      
        <content type="html"><![CDATA[<p>public class Test {<br>      public static void main(String[] args)        //测试代码<br>        {<br>            Complex a=new Complex(-1,0);</p><pre><code>        Complex b=new Complex(0,-3);        Complex c=new Complex(2,-2);        Complex d=new Complex(0,1);        Complex ff=new Complex();        ff=ff.addComplex(a,b);        ff=ff.decComplex(ff,c);        ff=ff.mulComplex(ff,d);        System.out.println(&quot;&quot;+ff.getReal()+&quot;&quot;+ff.getImage()+&quot;i&quot;);        System.out.println(&quot;-----------------&quot;);        Complex a1=new Complex(3,0);        Complex b1=new Complex(-4,5);        Complex c1=new Complex(-5.1,-7.2);        Complex d1=new Complex(-1,-2);        Complex ff1=new Complex();        ff1=ff1.addComplex(a1,b1);        ff1=ff1.mulComplex(ff1,c1);        ff1=ff1.decComplex(ff1,d1);        System.out.println(ff1.mod());</code></pre><p>//            System.out.println(“”+ff.getReal()+””+ff.getImage()+”i”);    </p><pre><code>    &#125;</code></pre><p>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Educational Codeforces Round 97 [Rated for Div. 2\]](</title>
      <link href="2020/103017112.html"/>
      <url>2020/103017112.html</url>
      
        <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-97-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-97-Rated-for-Div-2" class="headerlink" title="[Educational Codeforces Round 97 Rated for Div. 2]"></a>[Educational Codeforces Round 97 <a href="https://codeforces.com/blog/entry/84091">Rated for Div. 2]</a></h1><h1 id="半年以来的第一场cf，qvq，在室友的帮助下成功签了一个道，诶，慢慢来吧"><a href="#半年以来的第一场cf，qvq，在室友的帮助下成功签了一个道，诶，慢慢来吧" class="headerlink" title="半年以来的第一场cf，qvq，在室友的帮助下成功签了一个道，诶，慢慢来吧"></a>半年以来的第一场cf，qvq，在室友的帮助下成功签了一个道，诶，慢慢来吧</h1><h2 id="A-Marketing-Scheme"><a href="#A-Marketing-Scheme" class="headerlink" title="A. Marketing Scheme"></a>A. Marketing Scheme</h2><h3 id="好久没玩了，光是理解题都花了好久的时间，一开始暴力超时了，最后找最优情况才过了，这个应该是文字题吧，理解了就能ac"><a href="#好久没玩了，光是理解题都花了好久的时间，一开始暴力超时了，最后找最优情况才过了，这个应该是文字题吧，理解了就能ac" class="headerlink" title="好久没玩了，光是理解题都花了好久的时间，一开始暴力超时了，最后找最优情况才过了，这个应该是文字题吧，理解了就能ac"></a>好久没玩了，光是理解题都花了好久的时间，一开始暴力超时了，最后找最优情况才过了，这个应该是文字题吧，理解了就能ac</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int t,l,r;int main()&#123;    cin&gt;&gt;t;    while(t--)&#123;        cin&gt;&gt;l&gt;&gt;r;        if((r+1)&#x2F;2.0&lt;&#x3D;l)&#123;            cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;        &#125;else&#123;            cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B-Reverse-Binary-Strings"><a href="#B-Reverse-Binary-Strings" class="headerlink" title="B. Reverse Binary Strings"></a>B. Reverse Binary Strings</h2><p>一开始想的是和之前oj的翻煎饼一样模拟就ac了，可是模拟可太麻烦了，1个小时都没弄出来qvq，我可tcl。</p><p>思路就是找规律，列对于10010011，一旦出现00 11 这种连续的就需要反转，统计00 或者11的出现次数，输出最大值即可</p><pre class="line-numbers language-none"><code class="language-none">int main()&#123;IOS;    ios::sync_with_stdio(false);    cin.tie(0);while(cin&gt;&gt;t)&#123;while(t--)&#123;cin&gt;&gt;n&gt;&gt;s;int cnt0&#x3D;0,cnt1&#x3D;0;rep(i,0,n-2)&#123;if(s[i]&#x3D;&#x3D;s[i+1]&amp;&amp;s[i]&#x3D;&#x3D;&#39;1&#39;)&#123;cnt1++;&#125;if(s[i]&#x3D;&#x3D;s[i+1]&amp;&amp;s[i]&#x3D;&#x3D;&#39;0&#39;)&#123;cnt0++;&#125;&#125;cout&lt;&lt;max(cnt0,cnt1)&lt;&lt;endl;&#125;&#125; return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后面的题考察算法，题都没读，就不补了，争取下次做起一道"><a href="#后面的题考察算法，题都没读，就不补了，争取下次做起一道" class="headerlink" title="后面的题考察算法，题都没读，就不补了，争取下次做起一道"></a>后面的题考察算法，题都没读，就不补了，争取下次做起一道</h3><h1 id="除了补题以外，我觉得有必要总结一下"><a href="#除了补题以外，我觉得有必要总结一下" class="headerlink" title="除了补题以外，我觉得有必要总结一下"></a>除了补题以外，我觉得有必要总结一下</h1><ol><li><h1 id="ab题都不难，一定要在理解题目的情况下再去做，不然又要像b一样写一个100行的模拟"><a href="#ab题都不难，一定要在理解题目的情况下再去做，不然又要像b一样写一个100行的模拟" class="headerlink" title="ab题都不难，一定要在理解题目的情况下再去做，不然又要像b一样写一个100行的模拟"></a>ab题都不难，一定要在理解题目的情况下再去做，不然又要像b一样写一个100行的模拟</h1></li><li><h1 id="结合输入，输出理解题目"><a href="#结合输入，输出理解题目" class="headerlink" title="结合输入，输出理解题目"></a>结合输入，输出理解题目</h1></li><li><h1 id="还有就是一定一定要在纸上写了，思考了，再敲"><a href="#还有就是一定一定要在纸上写了，思考了，再敲" class="headerlink" title="还有就是一定一定要在纸上写了，思考了，再敲"></a>还有就是一定一定要在纸上写了，思考了，再敲</h1></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卓软算法设计实验1</title>
      <link href="2020/103061638.html"/>
      <url>2020/103061638.html</url>
      
        <content type="html"><![CDATA[<h1 id="卓软算法设计实验1"><a href="#卓软算法设计实验1" class="headerlink" title="卓软算法设计实验1"></a>卓软算法设计实验1</h1><p><a href="#%E4%BA%8C%E5%88%86">二分法模板以及函数使用</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="99-Euclid’s-Game"><a href="#99-Euclid’s-Game" class="headerlink" title="99: Euclid’s Game"></a>99: Euclid’s Game</h1><p>收藏</p><p>难度：简单</p><p>标签：暂无标签</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Starts with two unequal positive numbers (M,N and M&gt;N) on the board. Two players move in turn. On each move, a player has to write on the board a positive number equal to the difference of two numbers already on the board; this number must be new, i.e., different from all the numbers already on the board. The player who cannot move loses the game. Should you choose to move first or second in this game?</p><p>According to the above rules, there are two players play tihs game. Assumptions A write a number on the board at first, then B write it.</p><p>Your task is write a program to judge the winner is A or B.</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><pre class="line-numbers language-none"><code class="language-none">Two unequal positive numbers M and N , M&gt;N (M&lt;1000000)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre class="line-numbers language-none"><code class="language-none">A or B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="样例输入复制"><a href="#样例输入复制" class="headerlink" title="样例输入复制"></a>样例输入复制</h4><pre class="line-numbers language-none"><code class="language-none">3 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="样例输出复制"><a href="#样例输出复制" class="headerlink" title="样例输出复制"></a>样例输出复制</h4><pre class="line-numbers language-none"><code class="language-none">A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="说实话这道题虽然上课讲了，以前也遇到过，可是每次再做都搞忘了qvq"><a href="#说实话这道题虽然上课讲了，以前也遇到过，可是每次再做都搞忘了qvq" class="headerlink" title="说实话这道题虽然上课讲了，以前也遇到过，可是每次再做都搞忘了qvq"></a>说实话这道题虽然上课讲了，以前也遇到过，可是每次再做都搞忘了qvq</h2><h2 id="题目需要用到欧几里得最大公约数公式gcd，a-gcd（a，b）-2-判断是否为0"><a href="#题目需要用到欧几里得最大公约数公式gcd，a-gcd（a，b）-2-判断是否为0" class="headerlink" title="题目需要用到欧几里得最大公约数公式gcd，a/gcd（a，b）%2 判断是否为0"></a>题目需要用到欧几里得最大公约数公式gcd，a/gcd（a，b）%2 判断是否为0</h2><h3 id="举个栗子，28-7-，a-gcd-可得3-就是代表-有3个可写数-，a先写，b后写，mod2-判断奇偶，奇a，偶b"><a href="#举个栗子，28-7-，a-gcd-可得3-就是代表-有3个可写数-，a先写，b后写，mod2-判断奇偶，奇a，偶b" class="headerlink" title="举个栗子，28 7 ，a/gcd 可得3 就是代表 有3个可写数 ，a先写，b后写，mod2,判断奇偶，奇a，偶b"></a>举个栗子，28 7 ，a/gcd 可得3 就是代表 有3个可写数 ，a先写，b后写，mod2,判断奇偶，奇a，偶b</h3><h3 id="27-7-a-gcd为27-1-27的数-除了27-7都可以写，27mod2-25mod2-所以同样可以得到答案，（假装自己懂了qvq）"><a href="#27-7-a-gcd为27-1-27的数-除了27-7都可以写，27mod2-25mod2-所以同样可以得到答案，（假装自己懂了qvq）" class="headerlink" title="27 7   a/gcd为27 1~27的数 除了27 7都可以写，27mod2==25mod2 所以同样可以得到答案，（假装自己懂了qvq）"></a>27 7   a/gcd为27 1~27的数 除了27 7都可以写，27mod2==25mod2 所以同样可以得到答案，（假装自己懂了qvq）</h3><pre class="line-numbers language-none"><code class="language-none">#include&lt;bits&#x2F;stdc++.h&gt;&#x2F;&#x2F;POJ不支持#define rep(i,a,n) for (int i&#x3D;a;i&lt;&#x3D;n;i++)&#x2F;&#x2F;i为循环变量，a为初始值，n为界限值，递增#define per(i,a,n) for (int i&#x3D;a;i&gt;&#x3D;n;i--)&#x2F;&#x2F;i为循环变量， a为初始值，n为界限值，递减。#define pb push_back#define IOS ios::sync_with_stdio(false);cin.tie(0); cout.tie(0)#define fi first#define se second#define mp make_pairusing namespace std;const int inf &#x3D; 0x3f3f3f3f;&#x2F;&#x2F;无穷大const int maxn &#x3D; 1e5;&#x2F;&#x2F;最大值。typedef long long ll;typedef long double ld;typedef pair&lt;ll, ll&gt;  pll;typedef pair&lt;int, int&gt; pii;&#x2F;&#x2F;*******************************分割线，以上为自定义代码模板***************************************&#x2F;&#x2F;int gcd(int a,int b)&#123;if(b&#x3D;&#x3D;0)return a;else return gcd(b,a%b);&#125;int t,n;string s;int main()&#123;IOS;    ios::sync_with_stdio(false);&#x2F;&#x2F;    cin.tie(nullptr);int a,b;cin&gt;&gt;a&gt;&gt;b;if((a&#x2F;gcd(a,b))%2!&#x3D;0)&#123;cout&lt;&lt;&quot;A&quot;&lt;&lt;endl;&#125; else&#123;cout&lt;&lt;&quot;B&quot;&lt;&lt;endl;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="254-翻煎饼"><a href="#254-翻煎饼" class="headerlink" title="254: 翻煎饼"></a>254: 翻煎饼</h1><p>收藏</p><p>难度：简单</p><p>标签：暂无标签</p><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>麦兜最喜欢的食物是煎饼，每次在街上看到煎饼摊的时候都会在那里停留几分钟。最吸引麦兜还是煎饼师傅那一手熟练的翻煎饼的技术，一堆煎饼在那里，师傅只需要用铲子翻几下，就让煎饼整齐的叠在了一起。 这天，为了庆祝麦兜被保送上研究生，他从煎饼师傅那里买回来一些煎饼请客。但是麦兜买回的煎饼大小不一，麦兜太想吃煎饼了，他想吃这些煎饼中最大的那个。麦兜还知道同学们也很喜欢煎饼，为了表示他的诚意，他想让同学们先吃，麦兜最后吃，因此，麦兜想把煎饼按照从小到大的顺序叠放在一起，大的在最下面。这样麦兜就可以在最后拿到最大的那一块煎饼了。 现在请你帮助麦兜用煎饼师傅翻煎饼的方法把麦兜买的煎饼从小到大的叠在一起。煎饼师傅的方法是用铲子插入两块煎饼之间，然后将铲子上的煎饼翻一转，这样铲子上第一个煎饼就被翻到了顶上，而原来顶上的煎饼则被翻到了刚才插入铲子的地方。麦兜希望这样翻煎饼的次数最少。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><pre class="line-numbers language-none"><code class="language-none">输入包括两行，第一行是一个整数n(1&lt;&#x3D;n&lt;&#x3D;1000)，表示煎饼的个数，接下来的一行有n个不相同的整数，整数间用空格隔开，每个整数表示煎饼的大小（直径），左边表示顶部，右边表示底部。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><pre class="line-numbers language-none"><code class="language-none">输出为一行，翻煎饼的最少次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="样例输入复制-1"><a href="#样例输入复制-1" class="headerlink" title="样例输入复制"></a>样例输入复制</h4><pre class="line-numbers language-none"><code class="language-none">55 4 2 3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="样例输出复制-1"><a href="#样例输出复制-1" class="headerlink" title="样例输出复制"></a>样例输出复制</h4><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;&#x2F;&#x2F;这个题需要进行反复的数组翻转所以用vector和reverse函数非常合适 vector&lt;int&gt;a;int n;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;int shuru;cin&gt;&gt;shuru;a.push_back(shuru);&#125; &#x2F;&#x2F;c.begin() 返回一个迭代器，它指向容器c的第一个元素&#x2F;&#x2F;c.end() 返回一个迭代器，它指向容器c的最后一个元素的下一个位置&#x2F;&#x2F;c.rbegin() 返回一个逆序迭代器，它指向容器c的最后一个元素&#x2F;&#x2F;c.rend() 返回一个逆序迭代器，它指向容器c的第一个元素前面的位置&#x2F;&#x2F;!!!begin 和 end 一起  rbegin 和 rend 一起 不能混用 这里我使用的 reverse_iterator 它和 iterator的规律是相反的 vector&lt;int&gt;::iterator it&#x3D;a.end()-1;&#x2F;&#x2F;这个题要执行的两个操作 一个就是从右向左找到最大的 然后把它反转到最左边， 一个就是把它翻转到最右边&#x2F;&#x2F;直到 整个vector呈升序int ji&#x3D;0;&#x2F;&#x2F;记录翻转次数&#x2F;&#x2F;第一层循环，每次循环确保右边的一位为最大值，第二层循环去寻找最大值 ,然后进行翻转 for(;it !&#x3D; a.begin();it--) &#123;int max&#x3D;*it;vector&lt;int&gt;::iterator p&#x3D;it;vector&lt;int&gt;::iterator r&#x3D;it;int flag&#x3D;0;​for(vector&lt;int&gt;::iterator it1&#x3D;it-1;it1 !&#x3D; a.begin()-1;it1--)&#123;&#x2F;&#x2F;cout&lt;&lt;*it1; if(*it1&gt;max)&#123; p&#x3D;it1; max&#x3D;*it1; flag&#x3D;1; &#125;&#125;&#x2F;&#x2F;找到最大值max以及它的位置p if(flag&#x3D;&#x3D;0)&#123;continue;&#x2F;&#x2F;说明最后一个就是最大值不用翻转 &#125;if(p&#x3D;&#x3D;a.begin())&#123;&#x2F;&#x2F;情况一 ji+&#x3D;1;reverse(a.begin(),r+1);&#x2F;&#x2F;for(vector&lt;int&gt;::iterator ai &#x3D;a.begin();ai!&#x3D;a.end();ai++)&#123;&#x2F;&#x2F;cout&lt;&lt;*ai;&#x2F;&#x2F;&#125;&#x2F;&#x2F;cout&lt;&lt;endl;&#125;else&#123;&#x2F;&#x2F;情况二 ji+&#x3D;2;reverse(a.begin(),p+1);&#x2F;&#x2F;for(vector&lt;int&gt;::iterator ai &#x3D;a.begin();ai!&#x3D;a.end();ai++)&#123;&#x2F;&#x2F;cout&lt;&lt;*ai;&#x2F;&#x2F;&#125;&#x2F;&#x2F;cout&lt;&lt;endl;reverse(a.begin(),r+1);&#x2F;&#x2F;for(vector&lt;int&gt;::iterator ai &#x3D;a.begin();ai!&#x3D;a.end();ai++)&#123;&#x2F;&#x2F;cout&lt;&lt;*ai;&#x2F;&#x2F;&#125;&#x2F;&#x2F;cout&lt;&lt;endl;&#125; &#125;cout&lt;&lt;ji&lt;&lt;endl; ​&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="480-Locker-doors"><a href="#480-Locker-doors" class="headerlink" title="480: Locker doors"></a>480: Locker doors</h1><p>收藏</p><p>难度：简单</p><p>标签：暂无标签</p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>There are n lockers in a hallway numbered sequentially from 1 to n. Initially, all the locker doors are closed. You make n passes by the lockers, each time starting with locker #1. On the ith pass, i = 1, 2, …, n, you toggle the door of every ith locker: if the door is closed, you open it, if it is open, you close it. For example, after the first pass every door is open; on the second pass you only toggle the even-numbered lockers (#2, #4, …) so that after the second pass the even doors are closed and the odd ones are opened; the third time through you close the door of locker #3 (opened from the first pass), open the door of locker #6 (closed from the second pass), and so on. After the last pass, which locker doors are open and which are closed? How many of them are open? Your task is write a program to output How many doors are open after the last pass? Assumptions all doors are closed at first.</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><pre class="line-numbers language-none"><code class="language-none">a positive numbers n, total doors. n&lt;&#x3D;100000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><pre class="line-numbers language-none"><code class="language-none">a positive numbers ，the total of doors opened after the last pass.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="样例输入复制-2"><a href="#样例输入复制-2" class="headerlink" title="样例输入复制"></a>样例输入复制</h4><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="样例输出复制-2"><a href="#样例输出复制-2" class="headerlink" title="样例输出复制"></a>样例输出复制</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目大意：就是输入n，有n个箱子，然后你经过n次，一开始箱子都是关闭的，每经过一次就打开或关闭序号能被当前经过次数整除的箱子，问到最后有多少个开着的箱子"><a href="#题目大意：就是输入n，有n个箱子，然后你经过n次，一开始箱子都是关闭的，每经过一次就打开或关闭序号能被当前经过次数整除的箱子，问到最后有多少个开着的箱子" class="headerlink" title="题目大意：就是输入n，有n个箱子，然后你经过n次，一开始箱子都是关闭的，每经过一次就打开或关闭序号能被当前经过次数整除的箱子，问到最后有多少个开着的箱子"></a>题目大意：就是输入n，有n个箱子，然后你经过n次，一开始箱子都是关闭的，每经过一次就打开或关闭序号能被当前经过次数整除的箱子，问到最后有多少个开着的箱子</h2><h2 id="思路：第一次经过，全部打开，第二次2，4，6。。。我们想，任意一个数，就拿27号箱子举例，1，3，9，27变化，最后是关闭的。再取任意一个数26，1，26最后还是关闭的。再取一个数9，1，3，9，最后打开的！！！为什么呢？因为除了n-2任意的数都是由两个不同数相乘而来的！！！所以一开，一开关最后还是关闭的，所以我们只需要去找n-2这种数就是我们需要的答案"><a href="#思路：第一次经过，全部打开，第二次2，4，6。。。我们想，任意一个数，就拿27号箱子举例，1，3，9，27变化，最后是关闭的。再取任意一个数26，1，26最后还是关闭的。再取一个数9，1，3，9，最后打开的！！！为什么呢？因为除了n-2任意的数都是由两个不同数相乘而来的！！！所以一开，一开关最后还是关闭的，所以我们只需要去找n-2这种数就是我们需要的答案" class="headerlink" title="思路：第一次经过，全部打开，第二次2，4，6。。。我们想，任意一个数，就拿27号箱子举例，1，3，9，27变化，最后是关闭的。再取任意一个数26，1，26最后还是关闭的。再取一个数9，1，3，9，最后打开的！！！为什么呢？因为除了n^2任意的数都是由两个不同数相乘而来的！！！所以一开，一开关最后还是关闭的，所以我们只需要去找n^2这种数就是我们需要的答案"></a>思路：第一次经过，全部打开，第二次2，4，6。。。我们想，任意一个数，就拿27号箱子举例，1，3，9，27变化，最后是关闭的。再取任意一个数26，1，26最后还是关闭的。再取一个数9，1，3，9，最后打开的！！！为什么呢？因为除了n^2任意的数都是由两个不同数相乘而来的！！！所以一开，一开关最后还是关闭的，所以我们只需要去找n^2这种数就是我们需要的答案</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;&#x2F;&#x2F;POJ不支持#define rep(i,a,n) for (int i&#x3D;a;i&lt;&#x3D;n;i++)&#x2F;&#x2F;i为循环变量，a为初始值，n为界限值，递增#define per(i,a,n) for (int i&#x3D;a;i&gt;&#x3D;n;i--)&#x2F;&#x2F;i为循环变量， a为初始值，n为界限值，递减。#define pb push_back#define IOS ios::sync_with_stdio(false);cin.tie(0); cout.tie(0)#define fi first#define se second#define mp make_pairusing namespace std;const int inf &#x3D; 0x3f3f3f3f;&#x2F;&#x2F;无穷大const int maxn &#x3D; 1e5;&#x2F;&#x2F;最大值。typedef long long ll;typedef long double ld;typedef pair&lt;ll, ll&gt;  pll;typedef pair&lt;int, int&gt; pii;&#x2F;&#x2F;*******************************分割线，以上为自定义代码模板***************************************&#x2F;&#x2F;int gcd(int a,int b)&#123;if(b&#x3D;&#x3D;0)return a;else return gcd(b,a%b);&#125;int t,n;string s;int main()&#123;IOS;    ios::sync_with_stdio(false);&#x2F;&#x2F;    cin.tie(nullptr);int n;cin&gt;&gt;n;int ji&#x3D;0;&#x2F;&#x2F;count rep(i,1,n)&#123;if(i*i&lt;&#x3D;n)&#123;ji++;&#125;else&#123;cout&lt;&lt;ji&lt;&lt;endl;break;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="640-Binary-search"><a href="#640-Binary-search" class="headerlink" title="640: Binary search"></a>640: Binary search</h1><h3 id="题目怎么这么长，我吐了难得cv了。"><a href="#题目怎么这么长，我吐了难得cv了。" class="headerlink" title="????题目怎么这么长，我吐了难得cv了。"></a>????题目怎么这么长，我吐了难得cv了。</h3><h2 id="题目大意：在一个升序数列中找一个数的序列号"><a href="#题目大意：在一个升序数列中找一个数的序列号" class="headerlink" title="题目大意：在一个升序数列中找一个数的序列号"></a>题目大意：在一个升序数列中找一个数的序列号</h2><h2 id="思路：如题-二分查找"><a href="#思路：如题-二分查找" class="headerlink" title="思路：如题 二分查找"></a>思路：如题 二分查找</h2><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;&#x2F;&#x2F;POJ不支持#include&lt;algorithm&gt; using namespace std;int t,n;string s;&#x2F;&#x2F;方法一 &#x2F;&#x2F;二分写法 int bs(int a[],int m,int l,int r)&#123;int mid&#x3D;(l+r)&#x2F;2;if(l&gt;r)return -1; if(a[mid]&#x3D;&#x3D;m)&#123;return mid+1;&#125;else if(a[mid]&gt;m)&#123;bs(a,m,l,mid-1);&#125;else&#123;bs(a,m,mid+1,r);&#125;&#125; int main()&#123; cin&gt;&gt;n; int m;cin&gt;&gt;m; &#x2F;&#x2F;  int a[500000]; &#x2F;&#x2F;!!!!!!!!!!!!!!!!!!!!! &#x2F;&#x2F;只能开50w &#x2F;&#x2F;int b[1024*505];&#x2F;&#x2F;int b[700][700]; &#x2F;&#x2F;   !!!!!!!!!!!!!!!!!!!!!!&#x2F;&#x2F;  for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;a[i];&#125;&#x2F;&#x2F;&#x2F;&#x2F;当作一个bs教学吧&#x2F;&#x2F;&#x2F;&#x2F;利用stl的二分查找函数int m1&#x3D;-1;&#x2F;&#x2F;cin&gt;&gt;m1;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;方法二 函数用法 int p&#x3D;binary_search(a,a+n,m) ;&#x2F;&#x2F;&#x2F;&#x2F;cout&lt;&lt;p&lt;&lt;endl; &#x2F;&#x2F;返回bool 判断是否有&#x2F;&#x2F;int  p1&#x3D;lower_bound(a,a+n,m)-a;&#x2F;&#x2F;int  p2&#x3D;upper_bound(a,a+n,m)-a;int p0&#x3D;p1+1;&#x2F;&#x2F;cout&lt;&lt;p1&lt;&lt;endl;&#x2F;&#x2F;返回上一个位置 &#x2F;&#x2F;cout&lt;&lt;p2&lt;&lt;endl;&#x2F;&#x2F;返回下一个位置 &#x2F;&#x2F;cout&lt;&lt;p0&lt;&lt;endl;&#x2F;&#x2F;返回这个位置 cout&lt;&lt;bs(a,m,0,n-1);&#x2F;&#x2F;oj pass &#x2F;&#x2F;if(p&#x3D;&#x3D;0)&#123;&#x2F;&#x2F;cout&lt;&lt;&quot;-1\n&quot;;&#x2F;&#x2F;&#x2F;&#x2F;&#125;&#x2F;&#x2F;else&#123;&#x2F;&#x2F;cout&lt;&lt;p0&lt;&lt;endl;&#x2F;&#x2F;返回这个位置 &#x2F;&#x2F;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="530-Parallelepiped-walk"><a href="#530-Parallelepiped-walk" class="headerlink" title="530: Parallelepiped walk"></a>530: Parallelepiped walk</h1><p>收藏</p><p>难度：简单</p><p>标签：暂无标签</p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>Two points A (x1, y1, z1) and B (x2, y2, z2) are placed on the surface of parallelepiped with dimensions (see figure 1). These two points can be linked with various curves lying on the surface of P. You are to find out the square of the shortest curve length. Parallelepiped dimensions L, W, H and coordinates of the points are integers, . <img src="http://acm.swust.edu.cn:8080/JudgeOnline/qupic/1253.jpg" alt="img"></p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><pre class="line-numbers language-none"><code class="language-none">Input contains (in indicated order): L, W, H, x1, y1, z1, x2, y2, z2. The numbers are separated with spaces and end-of-line characters.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><pre class="line-numbers language-none"><code class="language-none">Output should contain the square of the shortest curve length between points A and B on the surface of P.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="样例输入复制-3"><a href="#样例输入复制-3" class="headerlink" title="样例输入复制"></a>样例输入复制</h4><pre class="line-numbers language-none"><code class="language-none">5 5 23 1 23 5 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="样例输出复制-3"><a href="#样例输出复制-3" class="headerlink" title="样例输出复制"></a>样例输出复制</h4><pre class="line-numbers language-none"><code class="language-none">36<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目大意：在六面体中，给出长宽高，以及面上的两点，找最短距离"><a href="#题目大意：在六面体中，给出长宽高，以及面上的两点，找最短距离" class="headerlink" title="题目大意：在六面体中，给出长宽高，以及面上的两点，找最短距离"></a>题目大意：在六面体中，给出长宽高，以及面上的两点，找最短距离</h2><h2 id="思路：判断两个左边是属于同面还是邻面，还是对面，然后选择合适的展开方式"><a href="#思路：判断两个左边是属于同面还是邻面，还是对面，然后选择合适的展开方式" class="headerlink" title="思路：判断两个左边是属于同面还是邻面，还是对面，然后选择合适的展开方式"></a>思路：<del>判断两个左边是属于同面还是邻面，还是对面，然后选择合适的展开方式</del></h2><p><del>具体点，第一步判断</del></p><ol><li><p><del>同面——a和b有两个相同的值</del></p></li><li><p><del>对面——a b有一个值分别为0和边值，其他值不为0和边值</del></p></li><li><p><del>邻面——其他情况</del></p></li></ol><p>   <del>第二部展开</del></p><ul><li><del>第一个情况下 d直接为    cout&lt;&lt;sqrt(x<em>x+y</em>y);</del></li><li><del>第二个情况下 。。。。。我难得想了 直接cv qvq</del></li><li><del>第三个情况下</del></li></ul><h2 id="cv"><a href="#cv" class="headerlink" title="cv"></a>cv</h2><h1 id="幸好我没有去分情况模拟，不然又写死，这个大佬的思路就是直接把三维转化为二维，暴力，把所有展开的可能都算出来取最小值就可以了"><a href="#幸好我没有去分情况模拟，不然又写死，这个大佬的思路就是直接把三维转化为二维，暴力，把所有展开的可能都算出来取最小值就可以了" class="headerlink" title="幸好我没有去分情况模拟，不然又写死，这个大佬的思路就是直接把三维转化为二维，暴力，把所有展开的可能都算出来取最小值就可以了"></a>幸好我没有去分情况模拟，不然又写死，这个大佬的思路就是直接把三维转化为二维，暴力，把所有展开的可能都算出来取最小值就可以了</h1><h2 id="cv-解法1"><a href="#cv-解法1" class="headerlink" title="cv 解法1"></a>cv 解法1</h2><h2 id="代码太强，理解不了qvq"><a href="#代码太强，理解不了qvq" class="headerlink" title="代码太强，理解不了qvq"></a><a href="https://blog.csdn.net/keshuai19940722/article/details/47732773">代码太强，理解不了qvq</a></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt; using namespace std;typedef long long ll;const ll inf &#x3D; 0x3f3f3f3f3f3f3f3f; &#x2F;&#x2F;方便传值计算struct Point &#123;ll x, y;Point (ll x &#x3D; 0, ll y &#x3D; 0): x(x), y(y) &#123;&#125;&#125;;&#x2F;&#x2F;展开到二维计算距离ll Dis (Point a, Point b) &#123;ll x &#x3D; a.x - b.x;ll y &#x3D; a.y - b.y;return x * x + y * y;&#125; ll solve (int L, int W, int H, int x1, int y1, int z1, int x2, int y2, int z2) &#123;ll ans &#x3D; inf;if (x2 &#x3D;&#x3D; 0) &#123;ans &#x3D; min(ans, Dis(Point(x1, y1), Point(-z2, y2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(y2-W, z2+W)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(-y2, -z2))); ans &#x3D; min(ans, Dis(Point(x1, y1), Point(z2-H, 2*W+H-y2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(z2-H, -(H+y2))));&#125; if (x2 &#x3D;&#x3D; L) &#123;ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+z2, y2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+W-y2, z2+W)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+y2, -z2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+H-z2, -(H+y2))));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+H-z2, 2*W+H-y2)));&#125; if (z2 &#x3D;&#x3D; 0) &#123;ans &#x3D; min(ans, Dis(Point(x1, y1), Point(x2, y2)));&#125; if (z2 &#x3D;&#x3D; H) &#123; ans &#x3D; min(ans, Dis(Point(x1, y1), Point(-(H+x2), y2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(-(H+y2), -x2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(-(W+H-y2), W+x2)));  ans &#x3D; min(ans, Dis(Point(x1, y1), Point(2*L+H-x2, y2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+W+H-y2, L+W-x2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+H+y2, x2-L))); ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+H+x2, 2*W+L-y2)));ans &#x3D; min(ans, Dis(Point(x1, y1), Point(L+H+x2, -(L+y2))));&#125;return ans;&#125; int main () &#123;int L, W, H, x1, y1, z1, x2, y2, z2;while (scanf(&quot;%d%d%d%d%d%d%d%d%d&quot;, &amp;L, &amp;W, &amp;H, &amp;x1, &amp;y1, &amp;z1, &amp;x2, &amp;y2, &amp;z2) &#x3D;&#x3D; 9) &#123;ll ans &#x3D; inf;for (int i &#x3D; 0; i &lt; 2; i++) &#123;            &#x2F;&#x2F;if (x1 &#x3D;&#x3D; 0) &#123;ans &#x3D; min(ans, solve(W, H, L, y1, z1, x1, y2, z2, x2));ans &#x3D; min(ans, solve(H, W, L, z1, y1, x1, z2, y2, x2));&#125; else if (x1 &#x3D;&#x3D; L) &#123;ans &#x3D; min(ans, solve(W, H, L, y1, z1, L-x1, y2, z2, L-x2));ans &#x3D; min(ans, solve(H, W, L, z1, y1, L-x1, z2, y2, L-x2));&#125; else if (y1 &#x3D;&#x3D; 0) &#123;ans &#x3D; min(ans, solve(L, H, W, x1, z1, y1, x2, z2, y2));ans &#x3D; min(ans, solve(H, L, W, z1, x1, y1, z2, x2, y2));&#125; else if (y1 &#x3D;&#x3D; W) &#123;ans &#x3D; min(ans, solve(L, H, W, x1, z1, W-y1, x2, z2, W-y2));ans &#x3D; min(ans, solve(H, L, W, z1, x1, W-y1, z2, x2, W-y2));&#125; else if (z1 &#x3D;&#x3D; 0) &#123;ans &#x3D; min(ans, solve(L, W, H, x1, y1, z1, x2, y2, z2));ans &#x3D; min(ans, solve(W, L, H, y1, x1, z1, y2, x2, z2));&#125; else if (z1 &#x3D;&#x3D; H) &#123;ans &#x3D; min(ans, solve(L, W, H, x1, y1, H-z1, x2, y2, H-z2));ans &#x3D; min(ans, solve(W, L, H, y1, x1, H-z1, y2, x2, H-z2));&#125;swap(x1,x2), swap(y1, y2), swap(z1, z2);&#125;printf(&quot;%lld\n&quot;, ans);&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cv-解法2"><a href="#cv-解法2" class="headerlink" title="cv 解法2"></a>cv 解法2</h2><h2 id="这是一个大佬-tql"><a href="#这是一个大佬-tql" class="headerlink" title="这是一个大佬 tql"></a><a href="https://blog.csdn.net/Fuxey/article/details/49819689?biz_id=102&utm_term=Parallelepiped%20walk&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-49819689&spm=1018.2118.3001.4449">这是一个大佬 tql</a></h2><h2 id="代码简单，重点学习这个"><a href="#代码简单，重点学习这个" class="headerlink" title="代码简单，重点学习这个"></a>代码简单，重点学习这个</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;deque&gt;#include &lt;stack&gt;#include &lt;algorithm&gt; using namespace std;int res; void solve(int i , int j , int x1 , int y1 , int x2 , int y2 , int z2 , int l , int w , int h)&#123;&#x2F;&#x2F;利用递归进行翻转求最小值if(z2&#x3D;&#x3D;0) &#123; res &#x3D; min(res , (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)); &#125;else &#123;if(i&gt;&#x3D;0 &amp;&amp; i&lt;&#x3D;1) solve(i+1, j, x1+h, y1, h-z2, y2, x2, h, w, l);if(i&lt;&#x3D;0 &amp;&amp; i&gt;-2) solve(i-1, j, x1-l, y1, z2, y2, l-x2, h, w, l);if(j&gt;&#x3D;0 &amp;&amp; j&lt;&#x3D;1) solve(i, j+1, x1, y1-w, x2, z2, w-y2, l, h, w);if(j&lt;&#x3D;0 &amp;&amp; j&gt;-2) solve(i, j-1, x1, y1+h, x2, h-z2, y2, l, h, w); &#125;&#125; int main(int argc, char *argv[]) &#123;int l, w, h, x1, y1, z1, x2, y2, z2;while(cin&gt;&gt;l&gt;&gt;w&gt;&gt;h&gt;&gt;x1&gt;&gt;y1&gt;&gt;z1&gt;&gt;x2&gt;&gt;y2&gt;&gt;z2)&#123;if(z1!&#x3D;h &amp;&amp; z1!&#x3D;0)&#123;if(y1!&#x3D;w &amp;&amp; y1!&#x3D;0)swap(x1, z1), swap(x2, z2), swap(l, h);else swap(y1, z1) , swap(y2, z2), swap(w, h);&#125;if(z1&#x3D;&#x3D;h) z1 &#x3D; 0 , z2 &#x3D; h-z2;&#x2F;&#x2F;不管怎么样 把第一个点转化到xoy上res &#x3D; 1&lt;&lt;29;&#x2F;&#x2F;相当于infsolve(0, 0, x1, y1, x2, y2, z2, l, w, h);cout&lt;&lt;res&lt;&lt;endl; &#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cv-解法3"><a href="#cv-解法3" class="headerlink" title="cv 解法3"></a>cv 解法3</h2><h2 id="来自于我的室友tds——tql"><a href="#来自于我的室友tds——tql" class="headerlink" title="来自于我的室友tds——tql"></a><a href="https://blog.csdn.net/xmyrzb/article/details/109302779?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160398760319725255523488%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160398760319725255523488&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-1-109302779.pc_first_rank_v2_rank_v28&utm_term=Parallelepiped+walk&spm=1018.2118.3001.4449">来自于我的室友tds——tql</a></h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma GCC optimize(&quot;-Ofast&quot;,&quot;-funroll-all-loops&quot;)#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;math.h&gt;using namespace std;#define endl &#39;\n&#39;#define INF 0x3f3f3f3f&#x2F;&#x2F; #define int long long#define debug(a) cout&lt;&lt;#a&lt;&lt;&quot;&#x3D;&quot;&lt;&lt;a&lt;&lt;endl;&#x2F;&#x2F; #define TDS_ACM_LOCALtypedef long long ll;const double PI&#x3D;acos(-1.0);const double e&#x3D;exp(1.0);const int M&#x3D;1e9+7;const int N&#x3D;2e5+7;inline int mymax(int x,int y)&#123;return x&gt;y?x:y;&#125;inline int mymin(int x,int y)&#123;return x&lt;y?x:y;&#125;inline int read()&#123;    register int x&#x3D;0, f&#x3D;0;    register char ch&#x3D;getchar();    while(ch&lt;&#39;0&#39;||ch&gt;&#39;9&#39;) f|&#x3D;ch&#x3D;&#x3D;&#39;-&#39;,ch&#x3D;getchar();    while(ch&gt;&#x3D;&#39;0&#39;&amp;&amp;ch&lt;&#x3D;&#39;9&#39;) x&#x3D;(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch&#x3D;getchar();    return f?-x:x;&#125;inline void write(register int x)&#123;         if(x &lt; 0) &#123;putchar(&#39;-&#39;);x &#x3D; -x;&#125;            if(x &gt; 9)  write(x&#x2F;10);    putchar(x % 10 + &#39;0&#39;);&#125;int ans;void walk(int i, int j, int x0, int y0, int x, int y, int z, int l, int w, int h)&#123;    if (z &#x3D;&#x3D; 0)        ans &#x3D; min((x0 - x) * (x0 - x) + (y0 - y) * (y0 - y), ans);    else    &#123;        if (i &gt;&#x3D; 0 &amp;&amp; i &lt; 2)    &#x2F;&#x2F; 右下翻            walk(i + 1, j, x0, y0 - w, x, z, w - y, l, h, w);        if (i &lt;&#x3D; 0 &amp;&amp; i &gt; -2)   &#x2F;&#x2F; 左下翻            walk(i - 1, j, x0, y0 + h, x, h - z, y, l, h, w);        if (j &gt;&#x3D; 0 &amp;&amp; j &lt; 2)    &#x2F;&#x2F; 里翻            walk(i, j + 1, x0 - l, y0, z, y, l - x, h, w, l);        if (j &lt;&#x3D; 0 &amp;&amp; j &gt; -2)   &#x2F;&#x2F; 外翻            walk(i, j - 1, x0 + h, y0, h - z, y, x, h, w, l);    &#125;&#125;void solve()&#123;    int l, w, h, x1, y1, z1, x2, y2, z2;    while (scanf(&quot;%d%d%d&quot;, &amp;l, &amp;w, &amp;h) !&#x3D; EOF)    &#123;        scanf(&quot;%d%d%d&quot;, &amp;x1, &amp;y1, &amp;z1);        scanf(&quot;%d%d%d&quot;, &amp;x2, &amp;y2, &amp;z2);        &#x2F;&#x2F; 通过等效翻转，将A点所在面翻转到底面        &#x2F;&#x2F; 判断A是否在上下面        if (z1 !&#x3D; 0 &amp;&amp; z1 !&#x3D; h)        &#123;            &#x2F;&#x2F; 判断A是否在左右面            if (y1 !&#x3D; 0 &amp;&amp; y1 !&#x3D; w)            &#123;                swap(x1, z1);                swap(x2, z2);                swap(l, h);            &#125;            else            &#123;                swap(y1, z1);                swap(y2, z2);                swap(w, h);            &#125;        &#125;        if (z1 &#x3D;&#x3D; h)        &#123;            z1 &#x3D; 0;            z2 &#x3D; h - z2;        &#125;        ans &#x3D; INF;        walk(0, 0, x1, y1, x2, y2, z2, l, w, h);        printf(&quot;%d\n&quot;, ans);    &#125;&#125;signed main()&#123;ios::sync_with_stdio(false);cin.tie(0), cout.tie(0);#ifdef TDS_ACM_LOCAL    freopen(&quot;D:\\VS code\\.vscode\\testall\\in.txt&quot;, &quot;r&quot;, stdin);    freopen(&quot;D:\\VS code\\.vscode\\testall\\out.txt&quot;, &quot;w&quot;, stdout);#endif    solve();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虽然尝试理解了代码，我还是写不出来了qvq，希望老师能把我讲懂吧！"><a href="#虽然尝试理解了代码，我还是写不出来了qvq，希望老师能把我讲懂吧！" class="headerlink" title="虽然尝试理解了代码，我还是写不出来了qvq，希望老师能把我讲懂吧！"></a>虽然尝试理解了代码，我还是写不出来了qvq，希望老师能把我讲懂吧！</h3>]]></content>
      
      
      <categories>
          
          <category> 二分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STl 上</title>
      <link href="2020/102664718.html"/>
      <url>2020/102664718.html</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h3 id="stl是C-程序库，我们只需要了解它的-1-容器-2-函数（内置算法）-3-迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择"><a href="#stl是C-程序库，我们只需要了解它的-1-容器-2-函数（内置算法）-3-迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择" class="headerlink" title="stl是C++程序库，我们只需要了解它的 1 容器 2 函数（内置算法） 3 迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择"></a>stl是C++程序库，我们只需要了解它的 1 容器 2 函数（内置算法） 3 迭代器，不同的stl容器有不同的存储方法，包含不同的函数，做题时根据输入，输出，以及所需的操作来选择</h3><h3 id="常用stl容器：1-vector-2-stack-3-queue-4-map-5-set-6-list"><a href="#常用stl容器：1-vector-2-stack-3-queue-4-map-5-set-6-list" class="headerlink" title="常用stl容器：1 vector 2 stack 3 queue 4 map 5 set 6 list"></a>常用stl容器：1 vector 2 stack 3 queue 4 map 5 set 6 list</h3><h4 id="以vector举例"><a href="#以vector举例" class="headerlink" title="以vector举例"></a>以vector举例</h4><h5 id="我们用一个容器应该知道它的特性-明白两点-它的特性-以及如何使用它"><a href="#我们用一个容器应该知道它的特性-明白两点-它的特性-以及如何使用它" class="headerlink" title="我们用一个容器应该知道它的特性 明白两点 它的特性 以及如何使用它"></a>我们用一个容器应该知道它的特性 明白两点 它的特性 以及如何使用它</h5><p>​    vector其实就是类似于数组 ，不过多了很多内置函数方便你处理</p><p>​    如何使用它：我给出一下实例 建议自己边敲边理解</p><p>你只需要知道 怎么定义 怎么输入 怎么输出 以及有哪些可用函数</p><pre class="line-numbers language-c++c" data-language="c++c"><code class="language-c++c">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int n;cin&gt;&gt;n;#1 初始化vector  创建了两个vector容器 a,b  vector&lt;int&gt;a,b;#2 输入 for(int i&#x3D;0;i&lt;n;i++)&#123;int shuru;cin&gt;&gt;shuru;#根据英文理解就是从后面输入元素 0&lt;-1&lt;-2 a.push_back(shuru);&#125;#3 输出（访问） it 是迭代器 也就是 a的 指针  用于访问vector元素 for(vector&lt;int&gt;::iterator it&#x3D;a.begin();it&lt;a.end();it++)&#123;#联想指针的用法 it是它的地址 cout&lt;&lt;*it;&#125;#4 vector 的 函数#增 #assian用于输入 #1将a的前0-2号元素复制给b b.assign(a.begin(),a.begin()+3);#2给b初始化4个为2的元素 b.assign(4,2);#a.insert() 插入a.insert(a.begin()+1,3);&#x2F;&#x2F;在第一个元素后面插入3  int num&#x3D;0; a.insert(a.begin()+1,3,num);&#x2F;&#x2F;在第一个元素后面插入3个num a.insert(a.begin()+1,b.begin()+2,b.begin()+4);&#x2F;&#x2F;在a的第一个元素后面插入b的2-4号元素值 #增加100个容器容量 a.reserve(100); #a.resize() #增加10个元素 a.resize(10);# 增加10个元素  初值为2 a.resize(10,2);#查 # a.empty 用于判空 if(a.empty()) &#123;cout&lt;&lt;&quot;a is empty&quot;； &#125;#a.size a的元素个数 int lenth&#x3D;a.size(); #a.capacity() a能容纳多少个元素 int room&#x3D;a.capacity();#访问第一个元素 int first&#x3D;a.front();#访问最后一个元素 int last &#x3D;a.back(); #删 #a.pop_back() 根据英语理解就是删除最后一个元素 a.pop_back();#a.erase() 删除0-2这个三个元素 a.erase(a.begin()+1,a.begin()+3); #清空a的元素 a.clear();#改#a b 交互 a.swap(b);#常用函数  #include&lt;algorithm&gt;&#x2F;&#x2F;用内置算法需要这个库 &#x2F;&#x2F;对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列 sort(a.begin(),a.end()); &#x2F;&#x2F;对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1 reverse(a.begin(),a.end());  &#x2F;&#x2F;把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素 copy(a.begin(),a.end(),b.begin()+1); &#x2F;&#x2F;在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置  find(a.begin(),a.end(),10); &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接下来我们进行一个实战"><a href="#接下来我们进行一个实战" class="headerlink" title="接下来我们进行一个实战"></a>接下来我们进行一个实战</h3><h3 id="http-acm-swust-edu-cn-problem-254-496"><a href="#http-acm-swust-edu-cn-problem-254-496" class="headerlink" title="http://acm.swust.edu.cn/#/problem/254/496"></a><a href="http://acm.swust.edu.cn/#/problem/254/496">http://acm.swust.edu.cn/#/problem/254/496</a></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;&#x2F;&#x2F;这里直接用万能头文件 vector的库来自于#include&lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F;这个题需要进行反复的数组翻转所以用vector和reverse函数非常合适 vector&lt;int&gt;a;int n;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;int shuru;cin&gt;&gt;shuru;a.push_back(shuru);&#125; &#x2F;&#x2F;c.begin() 返回一个迭代器，它指向容器c的第一个元素&#x2F;&#x2F;c.end() 返回一个迭代器，它指向容器c的最后一个元素的下一个位置&#x2F;&#x2F;c.rbegin() 返回一个逆序迭代器，它指向容器c的最后一个元素&#x2F;&#x2F;c.rend() 返回一个逆序迭代器，它指向容器c的第一个元素前面的位置&#x2F;&#x2F;!!!begin 和 end 一起  rbegin 和 rend 一起 不能混用 这里我使用的 iterator 它和 reverse_iterator的规律是相反的 vector&lt;int&gt;::iterator it&#x3D;a.end()-1;&#x2F;&#x2F;这个题要执行的两个操作 一个就是从右向左找到最大的 然后把它反转到最左边， 一个就是把它翻转到最右边&#x2F;&#x2F;直到 整个vector呈升序int ji&#x3D;0;&#x2F;&#x2F;记录翻转次数&#x2F;&#x2F;第一层循环，每次循环确保右边的一位为最大值，第二层循环去寻找最大值 ,然后进行翻转 for(;it !&#x3D; a.begin();it--) &#123;int max&#x3D;*it;vector&lt;int&gt;::iterator p&#x3D;it;vector&lt;int&gt;::iterator r&#x3D;it;int flag&#x3D;0;for(vector&lt;int&gt;::iterator it1&#x3D;it-1;it1 !&#x3D; a.begin()-1;it1--)&#123; if(*it1&gt;max)&#123; p&#x3D;it1; max&#x3D;*it1; flag&#x3D;1; &#125;&#125;&#x2F;&#x2F;找到最大值max以及它的位置p if(flag&#x3D;&#x3D;0)&#123;continue;&#x2F;&#x2F;说明最后一个就是最大值不用翻转 &#125;if(p&#x3D;&#x3D;a.begin())&#123;&#x2F;&#x2F;情况一 ji+&#x3D;1;reverse(a.begin(),r+1);&#125;else&#123;&#x2F;&#x2F;情况二 ji+&#x3D;2;reverse(a.begin(),p+1);reverse(a.begin(),r+1);&#125; &#125;cout&lt;&lt;ji&lt;&lt;endl; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ok-接下来-我们来介绍两个简单的"><a href="#ok-接下来-我们来介绍两个简单的" class="headerlink" title="ok 接下来 我们来介绍两个简单的"></a>ok 接下来 我们来介绍两个简单的</h2><h3 id="stack-即是栈-queue-就是队列"><a href="#stack-即是栈-queue-就是队列" class="headerlink" title="stack 即是栈 queue 就是队列"></a>stack 即是栈 queue 就是队列</h3><p>对于栈来说 记住3点</p><ol><li>stack 先进后出</li><li>#include<stack>导入库  stack<int>sta 定义</li><li>sta.push()进 sta.pop()出 sta.top()查看栈顶 sta.empty()查空 sta.size()查看大小</li></ol><p>对于队列来说 同上：</p><ol><li>queue先进先出</li><li>#include<queue> queue<int>que 定义</li><li>que.push()  que.pop() que.empty() que.size() 这些用法同上 就是访问不同que.front()  que.back()</li></ol><p>stack和queue 还有更高级的用法 后面用到再讲</p><h2 id="stack练习题"><a href="#stack练习题" class="headerlink" title="stack练习题"></a>stack练习题</h2><p><a href="https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2?tpId=46&amp;&amp;tqId=29158&amp;rp=1&amp;ru=/ta/classic-code&amp;qru=/ta/classic-code/question-ranking">https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2?tpId=46&amp;&amp;tqId=29158&amp;rp=1&amp;ru=/ta/classic-code&amp;qru=/ta/classic-code/question-ranking</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;stack&lt;char&gt;sta;char shuru;string a;cin&gt;&gt;a;for(int i&#x3D;0;i&lt;a.length();i++)&#123;shuru&#x3D;a[i];if(shuru&#x3D;&#39;&quot;&#39;)&#123;continue;&#125;if(sta.empty()||shuru&#x3D;&#x3D;&#39;(&#39;||shuru&#x3D;&#x3D;&#39;&#123;&#39;||shuru&#x3D;&#x3D;&#39;[&#39;)sta.push(shuru);else&#123;if((shuru&#x3D;&#x3D;&#39;)&#39;&amp;&amp;sta.top()!&#x3D;&#39;(&#39;)||(shuru&#x3D;&#x3D;&#39;]&#39;&amp;&amp;sta.top()!&#x3D;&#39;[&#39;)||(shuru&#x3D;&#x3D;&#39;&#125;&#39;&amp;&amp;sta.top()!&#x3D;&#39;&#123;&#39;))&#123;cout&lt;&lt;&quot;false\n&quot;;exit(0);&#125;sta.pop();&#125;&#125; if(a.length()%2&#x3D;&#x3D;0)cout&lt;&lt;&quot;true\n&quot;;else&#123;cout&lt;&lt;&quot;false\n&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="queue练习题"><a href="#queue练习题" class="headerlink" title="queue练习题"></a>queue练习题</h3><p><a href="https://www.nowcoder.com/practice/657d09e2b3704574814089ba8566d98d?tpId=182&amp;&amp;tqId=34299&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/exam-all/question-ranking">https://www.nowcoder.com/practice/657d09e2b3704574814089ba8566d98d?tpId=182&amp;&amp;tqId=34299&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/exam-all/question-ranking</a></p><h1 id="明天讲stl的-map-set-以及list-和string（重点）"><a href="#明天讲stl的-map-set-以及list-和string（重点）" class="headerlink" title="明天讲stl的 map set 以及list 和string（重点）"></a>明天讲stl的 map set 以及list 和string（重点）</h1><h1 id="stack-答案"><a href="#stack-答案" class="headerlink" title="stack 答案"></a>stack 答案</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;stack&lt;char&gt;sta;char shuru;string a;cin&gt;&gt;a;for(int i&#x3D;0;i&lt;a.length();i++)&#123;shuru&#x3D;a[i];if(shuru&#x3D;&#39;&quot;&#39;)&#123;continue;&#125;if(sta.empty()||shuru&#x3D;&#x3D;&#39;(&#39;||shuru&#x3D;&#x3D;&#39;&#123;&#39;||shuru&#x3D;&#x3D;&#39;[&#39;)sta.push(shuru);else&#123;if((shuru&#x3D;&#x3D;&#39;)&#39;&amp;&amp;sta.top()!&#x3D;&#39;(&#39;)||(shuru&#x3D;&#x3D;&#39;]&#39;&amp;&amp;sta.top()!&#x3D;&#39;[&#39;)||(shuru&#x3D;&#x3D;&#39;&#125;&#39;&amp;&amp;sta.top()!&#x3D;&#39;&#123;&#39;))&#123;cout&lt;&lt;&quot;false\n&quot;;exit(0);&#125;sta.pop();&#125;&#125; if(a.length()%2&#x3D;&#x3D;0)cout&lt;&lt;&quot;true\n&quot;;else&#123;cout&lt;&lt;&quot;false\n&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="牛客通过答案"><a href="#牛客通过答案" class="headerlink" title="牛客通过答案"></a>牛客通过答案</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    &#x2F;**     *      * @param s string字符串      * @return bool布尔型     *&#x2F;    bool isValid(string s) &#123;        &#x2F;&#x2F; write code here        stack&lt;char&gt;st;        for(int i&#x3D;0;i&lt;s.size();i++)        &#123;            if(s[i]&#x3D;&#x3D;&#39;(&#39;||s[i]&#x3D;&#x3D;&#39;&#123;&#39;||s[i]&#x3D;&#x3D;&#39;[&#39;)                st.push(s[i]);            else if(s[i]&#x3D;&#x3D;&#39;)&#39;)            &#123;                if(st.empty()&#x3D;&#x3D;true||st.top()!&#x3D;&#39;(&#39;)                &#123;                    return false;                &#125;                    st.pop();            &#125;            else if(s[i]&#x3D;&#x3D;&#39;]&#39;)            &#123;                if(st.empty()&#x3D;&#x3D;true||st.top()!&#x3D;&#39;[&#39;)                &#123;                    return false;                &#125;                    st.pop();            &#125;            else            &#123;                if(st.empty()&#x3D;&#x3D;true||st.top()!&#x3D;&#39;&#123;&#39;)                &#123;                    return false;                &#125;                    st.pop();            &#125;        &#125;        if(st.empty()&#x3D;&#x3D;true)            return true;        else            return false;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="queue-答案-牛课"><a href="#queue-答案-牛课" class="headerlink" title="queue 答案  牛课"></a>queue 答案  牛课</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;int main()&#123;int times;cin &gt;&gt; times;while (times--)&#123;deque&lt;int&gt; q;int temp;cin &gt;&gt; temp;for (int i &#x3D; temp; i !&#x3D; 0;--i)&#x2F;&#x2F;对于每一个数，将其加入队头，再将队尾加入队头&#123;q.push_front(i);q.push_front(q.back());q.pop_back();&#125;for (int i &#x3D; 0; i !&#x3D; q.size() - 1;++i)&#123;cout &lt;&lt; q[i] &lt;&lt; &#39; &#39;;&#125;cout &lt;&lt; q.back() &lt;&lt; endl;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pull test1</title>
      <link href="2020/102627212.html"/>
      <url>2020/102627212.html</url>
      
        <content type="html"><![CDATA[<p>test2</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pull test</title>
      <link href="2020/102636008.html"/>
      <url>2020/102636008.html</url>
      
        <content type="html"><![CDATA[<p>just a test</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于admin图片不能显示的解决方法</title>
      <link href="2020/102652089.html"/>
      <url>2020/102652089.html</url>
      
        <content type="html"><![CDATA[<h1 id="转载https-blog-csdn-net-nineya-com-article-details-103384546"><a href="#转载https-blog-csdn-net-nineya-com-article-details-103384546" class="headerlink" title="转载https://blog.csdn.net/nineya_com/article/details/103384546"></a>转载<a href="https://blog.csdn.net/nineya_com/article/details/103384546">https://blog.csdn.net/nineya_com/article/details/103384546</a></h1><p>`</p><p>转载：<a href="https://blog.csdn.net/nineya_com/article/details/103384546">https://blog.csdn.net/nineya_com/article/details/103384546</a></p><p><img src="E:\图片\margin.jpg" alt="margin"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本人win10系统，在使用插件时插入图片遇到了图片插入裂图的问题，在网上找了一下教程都无法解决，只有说手动改路径，但是我觉得手动改太麻烦，于是开始翻源码，被我找到了问题所在，顺便根据个人喜好做了一点点修改。文章可能还有很多不足，请大家谅解，欢迎大佬提意见。</p><p>附带插件GitHub地址：<a href="https://github.com/jaredly/hexo-admin">hexo-admin</a></p><p>文章可能有点长，这代表着我写的详细，时间并没有多少内容，每一步我都写的很详细，简单易懂。</p><h2 id="本文使用到的东西"><a href="#本文使用到的东西" class="headerlink" title="本文使用到的东西"></a>本文使用到的东西</h2><ol><li>win10电脑</li><li>hexo 3.1.0</li><li>hexo-admin 2.3.0</li></ol><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#_0">写在前面</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#_6">本文使用到的东西</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#1_12">1.问题描述</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#2_16">2.问题分析</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#3_18">3.问题解决第一步</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#4_43">4.问题解决第二步</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#5_68">5.插件修复+优化（附补丁下载地址）</a></li><li><ul><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#511_69">5.1优化1：修复了插图失败</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#522_71">5.2优化2：汉化</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#533_74">5.3优化3：添加按文章存储图片功能（方便管理）</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#544bug_79">5.4优化4：修复了编辑界面预览链接错误bug</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#555bug_83">5.5优化5：修复了新建分页失败bug</a></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#56_131">5.6补丁下载地址</a></li></ul></li><li><a href="https://blog.csdn.net/nineya_com/article/details/103384546#6_154">6.总结</a></li></ul></li></ul><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>在使用hexo插入图片的时候，我发现插入的 图片显示错误，而且链接有问题，不应该是“’！[upload successful] (\images\pasted-1.png)’”<br>应该是“’！[upload successful] (/images/pasted-1.png)’”<br><img src="https://img-blog.csdnimg.cn/20191204122801906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2.问题分析"></a>2.问题分析</h2><p>既然图片链接格式有错，我就手动改了一下链接，发现图片成功显示了，发布之后都可以正常使用。但是不能每次都怎么自己改代码，太麻烦了。后来我赵找到了问题所在。<img src="https://img-blog.csdnimg.cn/20191204123413656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-问题解决第一步"><a href="#3-问题解决第一步" class="headerlink" title="3.问题解决第一步"></a>3.问题解决第一步</h2><p>1.打开我们博客的目录的“<code>node_modules</code>”子目录，找到“<code>hexo-admin</code>”快捷方式。<br><img src="https://img-blog.csdnimg.cn/20191204123835452.png" alt="在这里插入图片描述"><br>2.双击进入该文件夹，打开“<code>api.js</code>”文件，通过搜索“<code>imagePath</code>”字符找到下图的代码片段，红框内就是我们要改的代码。<br><img src="https://img-blog.csdnimg.cn/20191204122124283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.将代码修改为</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">    filename &#x3D; imagePath+&quot;&#x2F;&quot;+ filename&#x2F;&#x2F;修改点    var outpath &#x3D; path.join(hexo.source_dir, filename)    var dataURI &#x3D; req.body.data.slice(&#39;data:image&#x2F;png;base64,&#39;.length)    var buf &#x3D; new Buffer(dataURI, &#39;base64&#39;)    hexo.log.d(&#96;saving image to $&#123;outpath&#125;&#96;)    fs.writeFile(outpath, buf, function (err) &#123;      if (err) &#123;        console.log(err)      &#125;      hexo.source.process().then(function () &#123;        res.done(&#123;          src: filename,&#x2F;&#x2F;修改点          msg: msg        &#125;)      &#125;);    &#125;)1234567891011121314151617<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-问题解决第二步"><a href="#4-问题解决第二步" class="headerlink" title="4.问题解决第二步"></a>4.问题解决第二步</h2><p>修改代码之后，我们可以看到，生成的已经是正确的图片路径了，但是图片还是加载失败了，我发现是因为图片刚上传上前去，hexo还没来得及让图片链接生效，重新刷新一下界面就可以显示了。</p><p>但是不能让我们插入一张图片就刷新一次，我们可以让图片上传后暂停一分钟再显示，所以要修改第二处代码。</p><p>1.打开hexo-admin目录下的子目录，找到“bundle.js文件”，并打开它。<br><img src="https://img-blog.csdnimg.cn/20191204125333522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.搜索“‘upload’”找到以下代码</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">uploadImage: function(data, filename)  &#123;return post(&#39;&#x2F;images&#x2F;upload&#39;, &#123;data: data, filename: filename&#125;);&#125;,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">    uploadImage: function(data, filename)  &#123;var imgJson&#x3D;post(&#39;&#x2F;images&#x2F;upload&#39;, &#123;data: data, filename: filename&#125;);var start &#x3D; (new Date()).getTime();while((new Date()).getTime() - start &lt; 1000) &#123;continue;&#125;return imgJson;&#125;,12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，图片无法显示的问题完美解决。</p><h2 id="5-插件修复-优化（附补丁下载地址）"><a href="#5-插件修复-优化（附补丁下载地址）" class="headerlink" title="5.插件修复+优化（附补丁下载地址）"></a>5.插件修复+优化（附补丁下载地址）</h2><h3 id="5-1优化1：修复了插图失败"><a href="#5-1优化1：修复了插图失败" class="headerlink" title="5.1优化1：修复了插图失败"></a>5.1优化1：修复了插图失败</h3><p>就是如上1-4步骤、修改源码，修复了插图失败bug。</p><h3 id="5-2优化2：汉化"><a href="#5-2优化2：汉化" class="headerlink" title="5.2优化2：汉化"></a>5.2优化2：汉化</h3><p>虽然hexo-admin使用起来非常简单，但是作为一个英语学渣，看着英文界面就是不舒服，所以汉化了该插件，爽。<br><img src="https://img-blog.csdnimg.cn/20191204194828197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191204194114148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-3优化3：添加按文章存储图片功能（方便管理）"><a href="#5-3优化3：添加按文章存储图片功能（方便管理）" class="headerlink" title="5.3优化3：添加按文章存储图片功能（方便管理）"></a>5.3优化3：添加按文章存储图片功能（方便管理）</h3><p>原本系统默认将图片统一存储在“<code>images</code>”目录下，文章一多，图片数量疯涨，就不容易维护，所以我添加了按文章存储图片的功能，图片将存储在与文章同目录的同名文件夹下。<br><img src="https://img-blog.csdnimg.cn/20191204194445547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>只需要在设置界面，勾选“图片存储在资源目录下”选项即可，取消勾选则将图片存放在hexo-admin定义的存储目录下。<img src="https://img-blog.csdnimg.cn/20191204194535747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-4优化4：修复了编辑界面预览链接错误bug"><a href="#5-4优化4：修复了编辑界面预览链接错误bug" class="headerlink" title="5.4优化4：修复了编辑界面预览链接错误bug"></a>5.4优化4：修复了编辑界面预览链接错误bug</h3><p>原本“分页”的编辑界面的预览链接是错误的，跳转的页面不正确，这里也修复了一下。<br><img src="https://img-blog.csdnimg.cn/2019120419502232.png" alt="在这里插入图片描述"></p><h3 id="5-5优化5：修复了新建分页失败bug"><a href="#5-5优化5：修复了新建分页失败bug" class="headerlink" title="5.5优化5：修复了新建分页失败bug"></a>5.5优化5：修复了新建分页失败bug</h3><p>最初新建分页无法点击确定时会提示如下错误，并且界面没有反应。但是刷新之后可以看到分页是新建成功的，就是有点麻烦，要刷新。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">Unhandled rejection TypeError: Cannot read property &#39;source&#39; of undefined    at addIsDraft (G:\blog\node_modules\_hexo-admin@2.3.0@hexo-admin\api.js:14:25)    at G:\blog\node_modules\_hexo-admin@2.3.0@hexo-admin\api.js:218:18    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)    at Promise._resolveCallback (G:\blog\node_modules\bluebird\js\release\promise.js:466:57)    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:559:17)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:725:18)    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)    at processImmediate (internal&#x2F;timers.js:439:21)12345678910111213141516171819<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修复之后该功能可以正常使用，但是还是会提示另一个错误，我弄了好久，没办法解决，等待懂的大佬教教我。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">Unhandled rejection WarehouseError: ID &#96;source&#x2F;444444&#x2F;index.md&#96; has been used    at new WarehouseError (G:\blog\node_modules\warehouse\lib\error.js:14:11)    at _Model._insertOne (G:\blog\node_modules\warehouse\lib\model.js:153:29)    at G:\blog\node_modules\warehouse\lib\model.js:179:63    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)    at G:\blog\node_modules\bluebird\js\release\using.js:185:26    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)    at PromiseArray._resolve (G:\blog\node_modules\bluebird\js\release\promise_array.js:127:19)    at PromiseArray._promiseFulfilled (G:\blog\node_modules\bluebird\js\release\promise_array.js:145:14)    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:609:26)    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)    at processImmediate (internal&#x2F;timers.js:439:21)12345678910111213141516171819202122<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6补丁下载地址"><a href="#5-6补丁下载地址" class="headerlink" title="5.6补丁下载地址"></a>5.6补丁下载地址</h3><p><strong>使用方法</strong><br>打开博客目录下的“<code>\node_modules\hexo-admin</code>”目录，全选复制所有补丁覆盖原文件即可。</p><p><strong>注意</strong><br>我使用的是<code>hexo-admin 2.3.0</code>版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。</p><p>如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。</p><p>卸载hexo-admin：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">npm uninstall hexo-admin –save1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新安装2.3.0版本</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">npm install hexo-admin@2.3.0 –save1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后覆盖插件。</p><p><strong>下载链接</strong>：链接：<a href="https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw">https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw</a><br>提取码：t3r0</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>弄这个插件耗费我一整天时间，做了一些些优化，目前本人用着还好，没有发现什么问题。有不清楚的地方欢迎评论留言，看到的我都会回复的。本文到此结束，有什么不足的地方请大家不吝指正。</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3</title>
      <link href="2020/10262360.html"/>
      <url>2020/10262360.html</url>
      
        <content type="html"><![CDATA[<p>原文地址<br><img src="/images/pasted-4.png" alt="upload successful"><br><a href="https://blog.csdn.net/nineya_com/article/details/103384546">https://blog.csdn.net/nineya_com/article/details/103384546</a></p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>写在前面</p><p>本人win10系统，在使用插件时插入图片遇到了图片插入裂图的问题，在网上找了一下教程都无法解决，只有说手动改路径，但是我觉得手动改太麻烦，于是开始翻源码，被我找到了问题所在，顺便根据个人喜好做了一点点修改。文章可能还有很多不足，请大家谅解，欢迎大佬提意见。</p><p>附带插件GitHub地址：hexo-admin</p><p>文章可能有点长，这代表着我写的详细，时间并没有多少内容，每一步我都写的很详细，简单易懂。</p><p>本文使用到的东西<br>win10电脑<br>hexo 3.1.0<br>hexo-admin 2.3.0<br>文章目录<br>写在前面<br>本文使用到的东西<br>1.问题描述<br>2.问题分析<br>3.问题解决第一步<br>4.问题解决第二步<br>5.插件修复+优化（附补丁下载地址）<br>5.1优化1：修复了插图失败<br>5.2优化2：汉化<br>5.3优化3：添加按文章存储图片功能（方便管理）<br>5.4优化4：修复了编辑界面预览链接错误bug<br>5.5优化5：修复了新建分页失败bug<br>5.6补丁下载地址<br>6.总结<br>1.问题描述<br>在使用hexo插入图片的时候，我发现插入的 图片显示错误，而且链接有问题，不应该是“’！[upload successful] (\images\pasted-1.png)’”<br>应该是“’！[upload successful] (/images/pasted-1.png)’”<br>在这里插入图片描述</p><p>2.问题分析<br>既然图片链接格式有错，我就手动改了一下链接，发现图片成功显示了，发布之后都可以正常使用。但是不能每次都怎么自己改代码，太麻烦了。后来我赵找到了问题所在。在这里插入图片描述</p><p>3.问题解决第一步<br>1.打开我们博客的目录的“node_modules”子目录，找到“hexo-admin”快捷方式。<br>在这里插入图片描述<br>2.双击进入该文件夹，打开“api.js”文件，通过搜索“imagePath”字符找到下图的代码片段，红框内就是我们要改的代码。<br>在这里插入图片描述<br>3.将代码修改为</p><pre><code>filename = imagePath+&quot;/&quot;+ filename    //修改点var outpath = path.join(hexo.source_dir, filename)var dataURI = req.body.data.slice(&#39;data:image/png;base64,&#39;.length)var buf = new Buffer(dataURI, &#39;base64&#39;)hexo.log.d(`saving image to $&#123;outpath&#125;`)fs.writeFile(outpath, buf, function (err) &#123;  if (err) &#123;    console.log(err)  &#125;  hexo.source.process().then(function () &#123;    res.done(&#123;      src: filename,    //修改点      msg: msg    &#125;)  &#125;);&#125;)</code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>4.问题解决第二步<br>修改代码之后，我们可以看到，生成的已经是正确的图片路径了，但是图片还是加载失败了，我发现是因为图片刚上传上前去，hexo还没来得及让图片链接生效，重新刷新一下界面就可以显示了。</p><p>但是不能让我们插入一张图片就刷新一次，我们可以让图片上传后暂停一分钟再显示，所以要修改第二处代码。</p><p>1.打开hexo-admin目录下的子目录，找到“bundle.js文件”，并打开它。<br>在这里插入图片描述<br>2.搜索“‘upload’”找到以下代码</p><p>uploadImage: function(data, filename)  {return post(‘/images/upload’, {data: data, filename: filename});},<br>1<br>修改为</p><pre><code>uploadImage: function(data, filename)  &#123;    var imgJson=post(&#39;/images/upload&#39;, &#123;data: data, filename: filename&#125;);    var start = (new Date()).getTime();    while((new Date()).getTime() - start &lt; 1000) &#123;        continue;    &#125;    return imgJson;&#125;,</code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>到这里，图片无法显示的问题完美解决。</p><p>5.插件修复+优化（附补丁下载地址）<br>5.1优化1：修复了插图失败<br>就是如上1-4步骤、修改源码，修复了插图失败bug。</p><p>5.2优化2：汉化<br>虽然hexo-admin使用起来非常简单，但是作为一个英语学渣，看着英文界面就是不舒服，所以汉化了该插件，爽。<br>在这里插入图片描述在这里插入图片描述</p><p>5.3优化3：添加按文章存储图片功能（方便管理）<br>原本系统默认将图片统一存储在“images”目录下，文章一多，图片数量疯涨，就不容易维护，所以我添加了按文章存储图片的功能，图片将存储在与文章同目录的同名文件夹下。<br>在这里插入图片描述<br>只需要在设置界面，勾选“图片存储在资源目录下”选项即可，取消勾选则将图片存放在hexo-admin定义的存储目录下。在这里插入图片描述</p><p>5.4优化4：修复了编辑界面预览链接错误bug<br>原本“分页”的编辑界面的预览链接是错误的，跳转的页面不正确，这里也修复了一下。<br>在这里插入图片描述</p><p>5.5优化5：修复了新建分页失败bug<br>最初新建分页无法点击确定时会提示如下错误，并且界面没有反应。但是刷新之后可以看到分页是新建成功的，就是有点麻烦，要刷新。</p><p>Unhandled rejection TypeError: Cannot read property ‘source’ of undefined<br>    at addIsDraft (G:\blog\node_modules_<a href="mailto:&#104;&#x65;&#x78;&#111;&#x2d;&#97;&#x64;&#x6d;&#105;&#x6e;&#64;&#x32;&#46;&#51;&#46;&#48;">&#104;&#x65;&#x78;&#111;&#x2d;&#97;&#x64;&#x6d;&#105;&#x6e;&#64;&#x32;&#46;&#51;&#46;&#48;</a>@hexo-admin\api.js:14:25)<br>    at G:\blog\node_modules_<a href="mailto:&#104;&#101;&#120;&#111;&#45;&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#x32;&#x2e;&#51;&#46;&#48;">&#104;&#101;&#120;&#111;&#45;&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#x32;&#x2e;&#51;&#46;&#48;</a>@hexo-admin\api.js:218:18<br>    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)<br>    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)<br>    at Promise._resolveCallback (G:\blog\node_modules\bluebird\js\release\promise.js:466:57)<br>    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:559:17)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:725:18)<br>    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)<br>    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)<br>    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)<br>    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)<br>    at processImmediate (internal/timers.js:439:21)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>修复之后该功能可以正常使用，但是还是会提示另一个错误，我弄了好久，没办法解决，等待懂的大佬教教我。</p><p>Unhandled rejection WarehouseError: ID <code>source/444444/index.md</code> has been used<br>    at new WarehouseError (G:\blog\node_modules\warehouse\lib\error.js:14:11)<br>    at _Model._insertOne (G:\blog\node_modules\warehouse\lib\model.js:153:29)<br>    at G:\blog\node_modules\warehouse\lib\model.js:179:63<br>    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)<br>    at G:\blog\node_modules\bluebird\js\release\using.js:185:26<br>    at tryCatcher (G:\blog\node_modules\bluebird\js\release\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (G:\blog\node_modules\bluebird\js\release\promise.js:547:31)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:604:18)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)<br>    at Promise._fulfill (G:\blog\node_modules\bluebird\js\release\promise.js:673:18)<br>    at PromiseArray._resolve (G:\blog\node_modules\bluebird\js\release\promise_array.js:127:19)<br>    at PromiseArray._promiseFulfilled (G:\blog\node_modules\bluebird\js\release\promise_array.js:145:14)<br>    at Promise._settlePromise (G:\blog\node_modules\bluebird\js\release\promise.js:609:26)<br>    at Promise._settlePromise0 (G:\blog\node_modules\bluebird\js\release\promise.js:649:10)<br>    at Promise._settlePromises (G:\blog\node_modules\bluebird\js\release\promise.js:729:18)<br>    at _drainQueueStep (G:\blog\node_modules\bluebird\js\release\async.js:93:12)<br>    at _drainQueue (G:\blog\node_modules\bluebird\js\release\async.js:86:9)<br>    at Async._drainQueues (G:\blog\node_modules\bluebird\js\release\async.js:102:5)<br>    at Immediate.Async.drainQueues [as _onImmediate] (G:\blog\node_modules\bluebird\js\release\async.js:15:14)<br>    at processImmediate (internal/timers.js:439:21)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>5.6补丁下载地址<br>使用方法<br>打开博客目录下的“\node_modules\hexo-admin”目录，全选复制所有补丁覆盖原文件即可。</p><p>注意<br>我使用的是hexo-admin 2.3.0版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。</p><p>如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。</p><p>卸载hexo-admin：</p><p>npm uninstall hexo-admin –save<br>1<br>重新安装2.3.0版本</p><p>npm install <a href="mailto:&#x68;&#x65;&#120;&#x6f;&#x2d;&#97;&#100;&#109;&#x69;&#110;&#64;&#50;&#x2e;&#51;&#46;&#48;">&#x68;&#x65;&#120;&#x6f;&#x2d;&#97;&#100;&#109;&#x69;&#110;&#64;&#50;&#x2e;&#51;&#46;&#48;</a> –save<br>1<br>然后覆盖插件。</p><p>下载链接：链接：<a href="https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw">https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw</a><br>提取码：t3r0</p><p>6.总结<br>弄这个插件耗费我一整天时间，做了一些些优化，目前本人用着还好，没有发现什么问题。有不清楚的地方欢迎评论留言，看到的我都会回复的。本文到此结束，有什么不足的地方请大家不吝指正。</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onine test</title>
      <link href="2020/102541528.html"/>
      <url>2020/102541528.html</url>
      
        <content type="html"><![CDATA[<p>this is a oneline test<br><a href="https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64">https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64</a></p><p><img src="%5Cimages%5Cpasted-1.png%5C" alt="upload successful"><br><img src="%5Cimages%5Cpasted-2.png%5C" alt="upload successful"><br><img src="%5Cimages%5Cpasted-3.png%5C" alt="upload successful"># 这个是标题</p><p><code>#include&lt;bits/std++.h&gt;</code></p><p><code>using namespace std;</code></p><p><code>int main()&#123;</code></p><p>​    <code>cout&lt;&lt;&quot;this is demo&quot;;</code></p><p><code>&#125;</code></p><p><img src="E:\图片\margin.jpg" alt="margin"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onine test2</title>
      <link href="2020/10251826.html"/>
      <url>2020/10251826.html</url>
      
        <content type="html"><![CDATA[<p>demo test<br>A. Matrix Game<br>*</p><ul><li>Author:  heyuhhh</li><li>Created Time:  2020/6/7 22:39:24</li><li>/<br>#include <iostream><br>#include <algorithm><br>#include <cstring><br>#include <cstdio><br>#include <vector><br>#include <cmath><br>#include <set><br>#include <map><br>#include <queue><br>#include <iomanip><br>#include &lt;assert.h&gt;<br>#include <functional><br>#include <numeric><br>#define MP make_pair<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define sz(x) (int)(x).size()<br>#define all(x) (x).begin(), (x).end()<br>#define INF 0x3f3f3f3f<br>#define Local<br>#ifdef Local<br>#define dbg(args…) do { cout &lt;&lt; #args &lt;&lt; “ -&gt; “; err(args); } while (0)<br>void err() { std::cout &lt;&lt; std::endl; }<br>template&lt;typename T, typename…Args&gt;<br>void err(T a, Args…args) { std::cout &lt;&lt; a &lt;&lt; ‘ ‘; err(args…); }<br>template &lt;template&lt;typename…&gt; class T, typename t, typename… A&gt;<br>void err(const T <t> &amp;arg, const A&amp;… args) {<br>for (auto &amp;v : arg) std::cout &lt;&lt; v &lt;&lt; ‘ ‘; err(args…); }<br>#else<br>#define dbg(…)<br>#endif<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>//head<br>const int N = 1e5 + 5;</li></ul><p>void run() {<br>    int n, m; cin &gt;&gt; n &gt;&gt; m;<br>    vector &lt;vector <int>&gt; a(n, vector <int>(m));<br>    vector <int> cols(m), rows(n);<br>    for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>            cin &gt;&gt; a[i][j];<br>            if (a[i][j]) {<br>                ++cols[j];<br>                ++rows[i];<br>            }<br>        }<br>    }<br>    int cntr = 0, cntl = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>        if (rows[i] == 0) ++cntr;<br>    }<br>    for (int i = 0; i &lt; m; i++) {<br>        if (cols[i] == 0) ++cntl;<br>    }<br>    int t = min(cntr, cntl);<br>    if (t &amp; 1) {<br>        cout &lt;&lt; “Ashish” &lt;&lt; ‘\n’;<br>    } else {<br>        cout &lt;&lt; “Vivek” &lt;&lt; ‘\n’;<br>    }<br>}</p><p>int main() {<br>    ios::sync_with_stdio(false);<br>    cin.tie(0); cout.tie(0);<br>    cout &lt;&lt; fixed &lt;&lt; setprecision(20);<br>    int T; cin &gt;&gt; T; while(T–)<br>    run();<br>    return 0;<br>}<br>B. Trouble Sort<br>注意到b中至少有一个0，一个1必然可以任意排序；否则直接判断一下即可。<br>/*</p><ul><li>Author:  heyuhhh</li><li>Created Time:  2020/6/7 22:44:07</li><li>/<br>#include <iostream><br>#include <algorithm><br>#include <cstring><br>#include <cstdio><br>#include <vector><br>#include <cmath><br>#include <set><br>#include <map><br>#include <queue><br>#include <iomanip><br>#include &lt;assert.h&gt;<br>#include <functional><br>#include <numeric><br>#define MP make_pair<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define sz(x) (int)(x).size()<br>#define all(x) (x).begin(), (x).end()<br>#define INF 0x3f3f3f3f<br>#define Local<br>#ifdef Local<br>#define dbg(args…) do { cout &lt;&lt; #args &lt;&lt; “ -&gt; “; err(args); } while (0)<br>void err() { std::cout &lt;&lt; std::endl; }<br>template&lt;typename T, typename…Args&gt;<br>void err(T a, Args…args) { std::cout &lt;&lt; a &lt;&lt; ‘ ‘; err(args…); }<br>template &lt;template&lt;typename…&gt; class T, typename t, typename… A&gt;<br>void err(const T <t> &amp;arg, const A&amp;… args) {<br>for (auto &amp;v : arg) std::cout &lt;&lt; v &lt;&lt; ‘ ‘; err(args…); }<br>#else<br>#define dbg(…)<br>#endif<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>//head<br>const int N = 1e5 + 5;</li></ul><p>void run() {<br>    int n; cin &gt;&gt; n;<br>    vector <int> a(n), b(n);<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; a[i];<br>    }<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; b[i];<br>    }<br>    sort(all(b));<br>    for (int i = 1; i &lt; n; i++) {<br>        if (b[i] != b[i - 1]) {<br>            cout &lt;&lt; “Yes” &lt;&lt; ‘\n’;<br>            return;<br>        }<br>    }<br>    for (int i = 1; i &lt; n; i++) {<br>        if (a[i] &lt; a[i - 1]) {<br>            cout &lt;&lt; “No” &lt;&lt; ‘\n’;<br>            return;<br>        }<br>    }<br>    cout &lt;&lt; “Yes” &lt;&lt; ‘\n’;<br>}</p><p>int main() {<br>    ios::sync_with_stdio(false);<br>    cin.tie(0); cout.tie(0);<br>    cout &lt;&lt; fixed &lt;&lt; setprecision(20);<br>    int T; cin &gt;&gt; T; while(T–)<br>    run();<br>    return 0;<br>}<br>C. Rotation Matching<br>求位置差值出现次数最多个数即可。</p><p>Code<br>/*</p><ul><li>Author:  heyuhhh</li><li>Created Time:  2020/6/7 23:22:04</li><li>/<br>#include <iostream><br>#include <algorithm><br>#include <cstring><br>#include <cstdio><br>#include <vector><br>#include <cmath><br>#include <set><br>#include <map><br>#include <queue><br>#include <iomanip><br>#include &lt;assert.h&gt;<br>#include <functional><br>#include <numeric><br>#define MP make_pair<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define sz(x) (int)(x).size()<br>#define all(x) (x).begin(), (x).end()<br>#define INF 0x3f3f3f3f<br>#define Local<br>#ifdef Local<br>#define dbg(args…) do { cout &lt;&lt; #args &lt;&lt; “ -&gt; “; err(args); } while (0)<br>void err() { std::cout &lt;&lt; std::endl; }<br>template&lt;typename T, typename…Args&gt;<br>void err(T a, Args…args) { std::cout &lt;&lt; a &lt;&lt; ‘ ‘; err(args…); }<br>template &lt;template&lt;typename…&gt; class T, typename t, typename… A&gt;<br>void err(const T <t> &amp;arg, const A&amp;… args) {<br>for (auto &amp;v : arg) std::cout &lt;&lt; v &lt;&lt; ‘ ‘; err(args…); }<br>#else<br>#define dbg(…)<br>#endif<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>//head<br>const int N = 1e5 + 5;</li></ul><p>void run() {<br>    int n; cin &gt;&gt; n;<br>    vector <int> a(n), b(n);<br>    vector &lt;vector <int>&gt; v(n + 1);<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; a[i];<br>        v[a[i]].push_back(i);<br>        v[a[i]].push_back(i + n);<br>    }<br>    vector <int> cnt(n);<br>    for (int i = 0; i &lt; n; i++) {<br>        cin &gt;&gt; b[i];<br>        for (auto it : v[b[i]]) {<br>            if (it &gt;= i &amp;&amp; it - i &lt; n) {<br>                ++cnt[it - i];<br>            }<br>        }<br>    }<br>    int ans = *max_element(all(cnt));<br>    cout &lt;&lt; ans &lt;&lt; ‘\n’;<br>}</p><p>int main() {<br>    ios::sync_with_stdio(false);<br>    cin.tie(0); cout.tie(0);<br>    cout &lt;&lt; fixed &lt;&lt; setprecision(20);<br>    run();<br>    return 0;<br>}</p><p>picture test<br><a href="https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64">https://img-blog.csdnimg.cn/20190805080838839.jpeg?x-oss-process=image/resize,m_fixed,h_64,w_64</a></p><p><img src="%5Cimages%5Cpasted-0.png%5C" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="2020/101222554.html"/>
      <url>2020/101222554.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/101116107.html"/>
      <url>2020/101116107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
